var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoleModels","category":"page"},{"location":"#SoleModels","page":"Home","title":"SoleModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SoleModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SoleModels]","category":"page"},{"location":"#SoleModels.BASE_FEATURE_ALIASES","page":"Home","title":"SoleModels.BASE_FEATURE_ALIASES","text":"Syntaxstring aliases for specific features\n\n\n\n\n\n","category":"constant"},{"location":"#SoleModels.CLabel","page":"Home","title":"SoleModels.CLabel","text":"const CLabel  = Union{String,Integer,CategoricalValue}\nconst RLabel  = AbstractFloat\nconst Label   = Union{CLabel,RLabel}\n\nTypes for supervised machine learning labels (classification and regression).\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.Label","page":"Home","title":"SoleModels.Label","text":"const CLabel  = Union{String,Integer,CategoricalValue}\nconst RLabel  = AbstractFloat\nconst Label   = Union{CLabel,RLabel}\n\nTypes for supervised machine learning labels (classification and regression).\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractCondition","page":"Home","title":"SoleModels.AbstractCondition","text":"abstract type AbstractCondition{FT<:AbstractFeature} end\n\nAbstract type for representing conditions that can be interpreted and evaluated on worlds of instances of a logical dataset. In logical contexts, these are wrapped into Propositions.\n\nSee also Proposition, syntaxstring, ScalarMetaCondition, ScalarCondition.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractConditionalAlphabet","page":"Home","title":"SoleModels.AbstractConditionalAlphabet","text":"abstract type AbstractConditionalAlphabet{C<:ScalarCondition} <: AbstractAlphabet{C} end\n\nAbstract type for alphabets of conditions.\n\nSee also ScalarCondition, ScalarMetaCondition, AbstractAlphabet.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractFeature","page":"Home","title":"SoleModels.AbstractFeature","text":"abstract type AbstractFeature end\n\nAbstract type for features of worlds of [Kripke structures](https://en.wikipedia.org/wiki/Kripkestructure(model_checking).\n\nSee also VarFeature, featvaltype, AbstractWorld.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractFullMemoset","page":"Home","title":"SoleModels.AbstractFullMemoset","text":"Abstract type for full memoization structures for checking generic formulas.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractLogiset","page":"Home","title":"SoleModels.AbstractLogiset","text":"abstract type AbstractLogiset{\n    W<:AbstractWorld,\n    U,\n    FT<:AbstractFeature,\n    FR<:AbstractFrame{W},\n} <: AbstractInterpretationSet{AbstractKripkeStructure{W,C where C<:AbstractCondition{_F where _F<:FT},T where T<:TruthValue,FR}} end\n\nAbstract type for logisets, that is, logical datasets for symbolic learning where each instance is a Kripke structure associating feature values to each world. Conditions (see AbstractCondition), and logical formulas with conditional letters can be checked on worlds of instances of the dataset.\n\nSee also AbstractCondition, AbstractFeature, AbstractKripkeStructure, AbstractInterpretationSet.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractMemoset","page":"Home","title":"SoleModels.AbstractMemoset","text":"abstract type AbstractMemoset{\n    W<:AbstractWorld,\n    U,\n    FT<:AbstractFeature,\n    FR<:AbstractFrame,\n} <: AbstractLogiset{W,U,FT,FR} end\n\nAbstract type for memoization structures to be used when checking formulas on logisets.\n\nSee also FullMemoset, SuportedLogiset, AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractModel","page":"Home","title":"SoleModels.AbstractModel","text":"abstract type AbstractModel{O} end\n\nAbstract type for mathematical models that, given an instance object (i.e., a piece of data), output an outcome of type O.\n\nSee also Rule, Branch, isopen, apply, issymbolic, info, outcometype.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractOneStepMemoset","page":"Home","title":"SoleModels.AbstractOneStepMemoset","text":"Abstract type for one-step memoization structures for checking formulas of type ⟨R⟩ p.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractScalarOneStepGlobalMemoset","page":"Home","title":"SoleModels.AbstractScalarOneStepGlobalMemoset","text":"Abstract type for one-step memoization structure for checking \"global\" formulas of type ⟨G⟩ (f ⋈ t).     We refer to these structures as global memosets.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractScalarOneStepRelationalMemoset","page":"Home","title":"SoleModels.AbstractScalarOneStepRelationalMemoset","text":"Abstract type for one-step memoization structures for checking formulas of type ⟨R⟩ (f ⋈ t), for a generic relation R. We refer to these structures as relational memosets.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractTemplatedFormula","page":"Home","title":"SoleModels.AbstractTemplatedFormula","text":"Abstract type simple formulas of given templates.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.AbstractUnivariateFeature","page":"Home","title":"SoleModels.AbstractUnivariateFeature","text":"abstract type AbstractUnivariateFeature{U} <: VarFeature{U} end\n\nA dimensional feature represented by the application of a function to a single variable of a dimensional channel. For example, it can wrap a scalar function computing how much red a Interval2D world, when interpreted on an image, contains.\n\nSee also Interval, Interval2D, UnivariateFeature, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.Aggregator","page":"Home","title":"SoleModels.Aggregator","text":"const Aggregator = Function\n\nA test operator is a binary Julia Function used for comparing a feature value and a threshold. In a crisp (i.e., boolean, non-fuzzy) setting, the test operator returns a boolean value, and <, >, ≥, ≤, !=, and == are typically used.\n\nSee also ScalarCondition, ScalarOneStepMemoset, TestOperator.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.BotFormula","page":"Home","title":"SoleModels.BotFormula","text":"Templated formula for ⊥, which always checks bottom.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.Branch","page":"Home","title":"SoleModels.Branch","text":"struct Branch{\n    O,\n    A<:AbstractFormula,\n    FM<:AbstractModel\n} <: ConstrainedModel{O,FM}\n    antecedent::A\n    posconsequent::FM\n    negconsequent::FM\n    info::NamedTuple\nend\n\nA Branch is one of the fundamental building blocks of symbolic modeling, and has the semantics:\n\nIF (antecedent) THEN (positive consequent) ELSE (negative consequent) END\n\nwhere the antecedent is a formula to be checked and the consequents are the feasible local outcomes of the block. If checking the antecedent evaluates to the top of the algebra, then the positive consequent is applied; otherwise, the negative consequenti is applied.\n\nNote that FM refers to the Feasible Models (FM) allowed in the model's sub-tree.\n\nSee also antecedent, posconsequent, negconsequent, istop, AbstractFormula, Rule, ConstrainedModel, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ConstantModel","page":"Home","title":"SoleModels.ConstantModel","text":"struct ConstantModel{O} <: LeafModel{O}\n    outcome::O\n    info::NamedTuple\nend\n\nThe simplest type of model is the ConstantModel; it is a LeafModel that always outputs the same outcome.\n\nExamples\n\njulia> SoleModels.LeafModel(2) isa SoleModels.ConstantModel\n\njulia> SoleModels.LeafModel(sum) isa SoleModels.FunctionModel\n┌ Warning: Over efficiency concerns, please consider wrappingJulia Function's into FunctionWrapper{O,Tuple{SoleModels.AbstractInterpretation}} structures,where O is their return type.\n└ @ SoleModels ~/.julia/dev/SoleModels/src/models/base.jl:337\ntrue\n\n\nSee also apply, FunctionModel, LeafModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ConstrainedModel","page":"Home","title":"SoleModels.ConstrainedModel","text":"An AbstractModel can wrap another AbstractModel, and use it to compute the outcome. As such, an AbstractModel can actually be the result of a composition of many models, and enclose a tree of AbstractModels (with LeafModels at the leaves). In order to typebound the Feasible Models (FM) allowed in the sub-tree, the ConstrainedModel type is introduced:\n\nabstract type ConstrainedModel{O,FM<:AbstractModel} <: AbstractModel{O} end\n\nFor example, ConstrainedModel{String,Union{Branch{String},ConstantModel{String}}} supertypes models that with String outcomes that make use of Branch{String} and ConstantModel{String} (essentially, a decision trees with Strings at the leaves).\n\nSee also LeafModel, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.DecisionForest","page":"Home","title":"SoleModels.DecisionForest","text":"A Decision Forest is a symbolic model that wraps an ensemble of models\n\nstruct DecisionForest{\n    O,\n    A<:AbstractFormula,\n    FFM<:LeafModel\n} <: ConstrainedModel{O,Union{<:Branch{<:O,<:A},<:FFM}}\n    trees::Vector{<:DecisionTree}\n    info::NamedTuple\nend\n\nSee also ConstrainedModel, MixedSymbolicModel, DecisionList, DecisionTree\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.DecisionList","page":"Home","title":"SoleModels.DecisionList","text":"struct DecisionList{\n    O,\n    A<:AbstractFormula,\n    FM<:AbstractModel\n} <: ConstrainedModel{O,FM}\n    rulebase::Vector{Rule{_O,_C,_FM} where {_O<:O,_C<:A,_FM<:FM}}\n    defaultconsequent::FM\n    info::NamedTuple\nend\n\nA DecisionList (or decision table, or rule-based model) is a symbolic model that has the semantics of an IF-ELSEIF-ELSE block:\n\nIF (antecedent_1)     THEN (consequent_1)\nELSEIF (antecedent_2) THEN (consequent_2)\n...\nELSEIF (antecedent_n) THEN (consequent_n)\nELSE (consequent_default) END\n\nwhere the antecedents are formulas to be, and the consequents are the feasible local outcomes of the block. Using the classical semantics, the antecedents are evaluated in order, and a consequent is returned as soon as a valid antecedent is found, or when the computation reaches the ELSE clause.\n\nNote that FM refers to the Feasible Models (FM) allowed in the model's sub-tree.\n\nSee also Rule, ConstrainedModel, DecisionTree, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.DecisionTree","page":"Home","title":"SoleModels.DecisionTree","text":"A DecisionTree is a symbolic model that operates as a nested structure of IF-THEN-ELSE blocks:\n\nIF (antecedent_1) THEN\n    IF (antecedent_2) THEN\n        (consequent_1)\n    ELSE\n        (consequent_2)\n    END\nELSE\n    IF (antecedent_3) THEN\n        (consequent_3)\n    ELSE\n        (consequent_4)\n    END\nEND\n\nwhere the antecedents are formulas to be, and the consequents are the feasible local outcomes of the block.\n\nIn practice, a DecisionTree simply wraps a constrained sub-tree of Branch and LeafModel:\n\nstruct DecisionTree{\nO,\n    A<:AbstractFormula,\n    FFM<:LeafModel\n} <: ConstrainedModel{O,Union{<:Branch{<:O,<:A},<:FFM}}\n    root::M where {M<:Union{FFM,Branch}}\n    info::NamedTuple\nend\n\nNote that FM refers to the Feasible Models (FM) allowed in the model's sub-tree. Also note that this structure also includes an info::NamedTuple for storing additional information.\n\nSee also ConstrainedModel, MixedSymbolicModel, DecisionList.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ExistentialTopFormula","page":"Home","title":"SoleModels.ExistentialTopFormula","text":"Templated formula for ⟨R⟩⊤.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ExplicitBooleanLogiset","page":"Home","title":"SoleModels.ExplicitBooleanLogiset","text":"struct ExplicitBooleanLogiset{\n    W<:AbstractWorld,\n    FT<:AbstractFeature,\n    FR<:AbstractFrame{W},\n} <: AbstractLogiset{W,Bool,FT,FR}\n\n    d :: Vector{Tuple{Dict{W,Vector{FT}},FR}}\n\nend\n\nA logiset where the features are boolean, and where each instance associates to each world the set of features with true.\n\nSee also AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ExplicitFeature","page":"Home","title":"SoleModels.ExplicitFeature","text":"struct ExplicitFeature{T} <: AbstractFeature\n    name::String\n    featstruct\nend\n\nA feature encoded explicitly as a slice of feature structure (see AbstractFeatureLookupSet).\n\nSee also AbstractFeatureLookupSet, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ExplicitLogiset","page":"Home","title":"SoleModels.ExplicitLogiset","text":"struct ExplicitLogiset{\n    W<:AbstractWorld,\n    U,\n    FT<:AbstractFeature,\n    FR<:AbstractFrame{W},\n} <: AbstractLogiset{W,U,FT,FR}\n\n    d :: Vector{Tuple{Dict{W,Dict{FT,U}},FR}}\n\nend\n\nA logiset where the features are boolean, and where each instance associates to each world the set of features with true.\n\nSee also AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.Feature","page":"Home","title":"SoleModels.Feature","text":"struct Feature{A} <: AbstractFeature\n    atom::A\nend\n\nA feature solely identified by an atom (e.g., a string with its name, a tuple of strings, etc.)\n\nSee also AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.FullMemoset","page":"Home","title":"SoleModels.FullMemoset","text":"A generic, full memoization structure that works for any crisp logic; For each instance of a dataset, this structure associates formulas to the set of worlds where the formula holds; it was introduced by Emerson-Clarke for the well-known model checking algorithm for CTL*.\n\nSee also SuportedLogiset, AbstractMemoset, AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.FunctionModel","page":"Home","title":"SoleModels.FunctionModel","text":"struct FunctionModel{O} <: LeafModel{O}\n    f::FunctionWrapper{O}\n    info::NamedTuple\nend\n\nA FunctionModel is a LeafModel that applies a native Julia Function in order to compute the outcome. Over efficiency concerns, it is mandatory to make explicit the output type O by wrapping the Function into an object of type FunctionWrapper{O}.\n\nSee also ConstantModel, FunctionWrapper, LeafModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.FunctionalCondition","page":"Home","title":"SoleModels.FunctionalCondition","text":"struct FunctionalCondition{FT<:AbstractFeature} <: AbstractCondition{FT}\n    feature::FT\n    f::FT\nend\n\nA condition which yields a truth value equal to the value of a function.\n\nSee also AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.LeafModel","page":"Home","title":"SoleModels.LeafModel","text":"abstract type LeafModel{O} <: AbstractModel{O} end\n\nAbstract type for leaf models, that is, models which outcomes do not depend other models, and represents the bottom of the computation. In general, an AbstractModel can generally wrap other AbstractModels; in such case, the outcome can depend on the inner models being applied on the instance object. Otherwise, the model is considered as a leaf, or final, and is the leaf of a tree of AbstractModels.\n\nSee also ConstantModel, FunctionModel, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.MixedSymbolicModel","page":"Home","title":"SoleModels.MixedSymbolicModel","text":"A MixedSymbolicModel is a symbolic model that operaters as a free nested structure of IF-THEN-ELSE and IF-ELSEIF-ELSE blocks:\n\nIF (antecedent_1) THEN\n    IF (antecedent_1)     THEN (consequent_1)\n    ELSEIF (antecedent_2) THEN (consequent_2)\n    ELSE (consequent_1_default) END\nELSE\n    IF (antecedent_3) THEN\n        (consequent_3)\n    ELSE\n        (consequent_4)\n    END\nEND\n\nwhere the antecedents are formulas to be checked, and the consequents are the feasible local outcomes of the block.\n\nIn Sole.jl, this logic can implemented using ConstrainedModels such as Rules, Branchs, DecisionLists, DecisionTrees, and the be wrapped into a MixedSymbolicModel:\n\nstruct MixedSymbolicModel{O,FM<:AbstractModel} <: ConstrainedModel{O,FM}\n    root::M where {M<:Union{LeafModel{<:O},ConstrainedModel{<:O,<:FM}}}\n    info::NamedTuple\nend\n\nNote that FM refers to the Feasible Models (FM) allowed in the model's sub-tree.\n\nSee also ConstrainedModel, DecisionTree, DecisionList.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.MultiFormula","page":"Home","title":"SoleModels.MultiFormula","text":"struct MultiFormula{F<:AbstractFormula} <: AbstractSyntaxStructure\n    modforms::Dict{Int,F}\nend\n\nA symbolic antecedent that can be checked on a MultiLogiset, associating antecedents to modalities.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.MultiLogiset","page":"Home","title":"SoleModels.MultiLogiset","text":"struct MultiLogiset{L<:AbstractLogiset}\n    modalities  :: Vector{L}\nend\n\nA logical dataset composed of different modalities); this structure is useful for representing multimodal datasets in logical terms.\n\nSee also AbstractLogiset, minify.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.MultivariateFeature","page":"Home","title":"SoleModels.MultivariateFeature","text":"struct MultivariateFeature{U} <: VarFeature{U}\n    f::Function\nend\n\nA dimensional feature represented by the application of a function to a dimensional channel. For example, it can wrap a scalar function computing how much a Interval2D world, when interpreted on an image, resembles a horse. Note that the image has a number of spatial variables (3, for the case of RGB), and \"resembling a horse\" may require a computation involving all variables.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.RLabel","page":"Home","title":"SoleModels.RLabel","text":"const CLabel  = Union{String,Integer,CategoricalValue}\nconst RLabel  = AbstractFloat\nconst Label   = Union{CLabel,RLabel}\n\nTypes for supervised machine learning labels (classification and regression).\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.Rule","page":"Home","title":"SoleModels.Rule","text":"struct Rule{\n    O,\n    A<:AbstractFormula,\n    FM<:AbstractModel\n} <: ConstrainedModel{O,FM}\n    antecedent::A\n    consequent::FM\n    info::NamedTuple\nend\n\nA Rule is one of the fundamental building blocks of symbolic modeling, and has the semantics:\n\nIF (antecedent) THEN (consequent) END\n\nwhere the antecedent is a formula to be checked, and the consequent is the local outcome of the block.\n\nNote that FM refers to the Feasible Models (FM) allowed in the model's sub-tree.\n\nSee also antecedent, consequent, AbstractFormula, ConstrainedModel, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarChainedMemoset","page":"Home","title":"SoleModels.ScalarChainedMemoset","text":"A full memoization structure used for checking formulas of scalar conditions on datasets with scalar features. This structure is the equivalent to FullMemoset, but with scalar features some important optimizations can be done.\n\nSee also FullMemoset, SuportedLogiset, AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarCondition","page":"Home","title":"SoleModels.ScalarCondition","text":"struct ScalarCondition{U,FT,M<:ScalarMetaCondition{FT}} <: AbstractCondition{FT}\n    metacond::M\n    a::U\nend\n\nA scalar condition comparing a computed feature value (see ScalarMetaCondition) and a threshold value a. It can be evaluated on a world of an instance of a logical dataset.\n\nFor example: minV1  10, which translates to \"Within this world, the minimum of variable 1 is greater or equal than 10.\" In this case, the feature a UnivariateMin object.\n\nSee also AbstractCondition, negation, ScalarMetaCondition.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarExistentialFormula","page":"Home","title":"SoleModels.ScalarExistentialFormula","text":"Templated formula for ⟨R⟩ f ⋈ t.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarFormula","page":"Home","title":"SoleModels.ScalarFormula","text":"Abstract type for templated formulas on scalar conditions.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarMetaCondition","page":"Home","title":"SoleModels.ScalarMetaCondition","text":"struct ScalarMetaCondition{FT<:AbstractFeature,O<:TestOperator} <: AbstractCondition{FT}\n    feature::FT\n    test_operator::O\nend\n\nA metacondition representing a scalar comparison method. Here, the feature is a scalar function that can be computed on a world of an instance of a logical dataset. A test operator is a binary mathematical relation, comparing the computed feature value and an external threshold value (see ScalarCondition). A metacondition can also be used for representing the infinite set of conditions that arise with a free threshold (see UnboundedScalarConditions): minV1  a a  ℝ.\n\nSee also AbstractCondition, negation, ScalarCondition.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarOneStepRelationalMemoset","page":"Home","title":"SoleModels.ScalarOneStepRelationalMemoset","text":"A generic, one-step memoization structure used for checking specific formulas of scalar conditions on datasets with scalar features. The formulas are of type ⟨R⟩ (f ⋈ t)\n\nSee also FullMemoset, SuportedLogiset, AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarPropositionFormula","page":"Home","title":"SoleModels.ScalarPropositionFormula","text":"Templated formula for f ⋈ t.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ScalarUniversalFormula","page":"Home","title":"SoleModels.ScalarUniversalFormula","text":"Templated formula for [R] f ⋈ t.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.SupportedLogiset","page":"Home","title":"SoleModels.SupportedLogiset","text":"A logiset associated to a number of cascading full or one-step memoization structures, that are used when checking formulas.\n\nSee also SuportedLogiset, AbstractFullMemoset, AbstractOneStepMemoset, AbstractLogiset.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.TestOperator","page":"Home","title":"SoleModels.TestOperator","text":"const TestOperator = Function\n\nA test operator is a binary Julia Function used for comparing a feature value and a threshold. In a crisp (i.e., boolean, non-fuzzy) setting, the test operator returns a boolean value, and <, >, ≥, ≤, !=, and == are typically used.\n\nSee also Aggregator, ScalarCondition.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.TopFormula","page":"Home","title":"SoleModels.TopFormula","text":"Templated formula for ⊤, which always checks top.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnboundedScalarConditions","page":"Home","title":"SoleModels.UnboundedScalarConditions","text":"struct UnboundedScalarConditions{C<:ScalarCondition} <: AbstractConditionalAlphabet{C}\n    metaconditions::Vector{<:ScalarMetaCondition}\nend\n\nAn infinite alphabet of conditions induced from a finite set of metaconditions. For example, if metaconditions = [ScalarMetaCondition(UnivariateMin(1), ≥)], the alphabet represents the (infinite) set: minV1  a a  ℝ.\n\nSee also BoundedScalarConditions, ScalarCondition, ScalarMetaCondition, AbstractAlphabet.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateFeature","page":"Home","title":"SoleModels.UnivariateFeature","text":"struct UnivariateFeature{U} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\n    f::Function\nend\n\nA dimensional feature represented by the application of a generic function f to a single variable of a dimensional channel. For example, it can wrap a scalar function computing how much red a Interval2D world, when interpreted on an image, contains.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateMax","page":"Home","title":"SoleModels.UnivariateMax","text":"struct UnivariateMax{U} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\nend\n\nNotable univariate feature computing the maximum value for a given variable.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, UnivariateMin, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateMin","page":"Home","title":"SoleModels.UnivariateMin","text":"struct UnivariateMin{U} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\nend\n\nNotable univariate feature computing the minimum value for a given variable.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, UnivariateMax, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateNamedFeature","page":"Home","title":"SoleModels.UnivariateNamedFeature","text":"struct UnivariateNamedFeature{U} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\n    name::String\nend\n\nA univariate feature solely identified by its name and reference variable.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateSoftMax","page":"Home","title":"SoleModels.UnivariateSoftMax","text":"struct UnivariateSoftMax{U,T<:AbstractFloat} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\n    alpha::T\nend\n\nUnivariate feature computing a \"softened\" version of the maximum value for a given variable.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, UnivariateMax, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateSoftMin","page":"Home","title":"SoleModels.UnivariateSoftMin","text":"struct UnivariateSoftMin{U,T<:AbstractFloat} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\n    alpha::T\nend\n\nUnivariate feature computing a \"softened\" version of the minimum value for a given variable.\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, UnivariateMin, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UnivariateValue","page":"Home","title":"SoleModels.UnivariateValue","text":"struct UnivariateValue{U} <: AbstractUnivariateFeature{U}\n    i_variable::Integer\nend\n\nSimply the value of a scalar variable (propositional case, when the frame has a single world).\n\nSee also Interval, Interval2D, AbstractUnivariateFeature, UnivariateMax, VarFeature, AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.UniversalBotFormula","page":"Home","title":"SoleModels.UniversalBotFormula","text":"Templated formula for [R]⊥.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.ValueCondition","page":"Home","title":"SoleModels.ValueCondition","text":"struct ValueCondition{FT<:AbstractFeature} <: AbstractCondition{FT}\n    feature::FT\nend\n\nA condition which yields a truth value equal to the value of a feature.\n\nSee also AbstractFeature.\n\n\n\n\n\n","category":"type"},{"location":"#SoleModels.VarFeature","page":"Home","title":"SoleModels.VarFeature","text":"abstract type VarFeature{U} <: AbstractFeature end\n\nAbstract type for feature functions that can be computed on (multi)variate data. Instances of multivariate datasets have values for a number of variables, which can be used to define logical features.\n\nFor example, with dimensional data (e.g., multivariate time series, digital images and videos), features can be computed as the minimum value for a given variable on a specific interval/rectangle/cuboid (in general, a GeometricalWorldGeometricalWorld).\n\nAs an example of a dimensional feature, consider min[V1], which computes the minimum for variable 1 for a given world. ScalarConditions such as min[V1] >= 10 can be, then, evaluated on worlds.\n\nSee also scalarlogiset, featvaltype, computefeature, Interval.\n\n\n\n\n\n","category":"type"},{"location":"#Base.isopen-Tuple{SoleModels.AbstractModel}","page":"Home","title":"Base.isopen","text":"isopen(::AbstractModel)::Bool\n\nReturn whether a model is open. An AbstractModel{O} is closed if it is always able to provide an outcome of type O. Otherwise, the model can output nothing values and is referred to as open.\n\nRule is an example of an open model, while Branch is an example of closed model.\n\nSee also AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#Base.rand-Tuple{Random.AbstractRNG, SoleModels.BoundedScalarConditions}","page":"Home","title":"Base.rand","text":"function Base.rand(\n    rng::AbstractRNG,\n    a::BoundedScalarConditions;\n    metaconditions::Union{Nothing,ScalarMetaCondition,AbstractVector{<:ScalarMetaCondition}} = nothing,\n    feature::Union{Nothing,AbstractFeature,AbstractVector{<:AbstractFeature}} = nothing,\n    test_operator::Union{Nothing,TestOperator,AbstractVector{<:TestOperator}} = nothing,\n)::Proposition\n\nRandomly sample a Proposition holding a ScalarCondition from conditional alphabet a, such that:\n\nif metaconditions are specified, then the set of metaconditions (feature-operator pairs)\n\nis limited to metaconditions;\n\nif feature is specified, then the set of metaconditions (feature-operator pairs)\n\nis limited to those with feature;\n\nif test_operator is specified, then the set of metaconditions (feature-operator pairs)\n\nis limited to those with test_operator.\n\nSee also BoundedScalarConditions, ScalarCondition, ScalarMetaCondition, `AbstractAlphabet'.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.antecedent-Tuple{Rule}","page":"Home","title":"SoleModels.antecedent","text":"antecedent(m::Union{Rule,Branch})::AbstractFormula\n\nReturn the antecedent of a rule/branch, that is, the formula to be checked upon applying the model.\n\nSee also apply, consequent, antecedenttops, Rule, Branch.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.antecedenttops","page":"Home","title":"SoleModels.antecedenttops","text":"function antecedenttops(\n    m::Union{Rule,Branch},\n    args...;\n    kwargs...\n)\n    check(antecedent(m), id, args...; kwargs...)\nend\n\nSimply check the antecedent of a rule on an instance or dataset.\n\nSee also antecedent, Rule, Branch.\n\n\n\n\n\n","category":"function"},{"location":"#SoleModels.apply-Tuple{SoleModels.AbstractModel, SoleLogics.AbstractInterpretation}","page":"Home","title":"SoleModels.apply","text":"apply(\n    m::AbstractModel,\n    i::AbstractInterpretation;\n    check_args::Tuple = (),\n    check_kwargs::NamedTuple = (;),\n    functional_args::Tuple = (),\n    functional_kwargs::NamedTuple = (;),\n    kwargs...\n)::outputtype(m)\n\napply(\n    m::AbstractModel,\n    d::AbstractInterpretationSet;\n    check_args::Tuple = (),\n    check_kwargs::NamedTuple = (;),\n    functional_args::Tuple = (),\n    functional_kwargs::NamedTuple = (;),\n    kwargs...\n)::AbstractVector{<:outputtype(m)}\n\nReturn the output prediction of the model on an instance, or on each instance of a dataset. The predictions can be nothing if the model is open.\n\ncheck_args and check_kwargs can influence check's behavior at the time of its computation (see check)\n\nfunctional_args and functional_kwargs can influence FunctionModel's behavior when the corresponding function is applied to AbstractInterpretation (see FunctionModel, AbstractInterpretation)\n\nSee also isopen, outcometype, outputtype, AbstractModel, AbstractInterpretation, AbstractInterpretationSet.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.apply_test_operator-Union{Tuple{T2}, Tuple{T1}, Tuple{Function, T1, T2}} where {T1, T2}","page":"Home","title":"SoleModels.apply_test_operator","text":"Apply a test operator by simply passing the feature value and threshold to the (binary) test operator function.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.balanced_weights-Union{Tuple{AbstractVector{L}}, Tuple{L}} where L<:Union{Integer, String, CategoricalArrays.CategoricalValue}","page":"Home","title":"SoleModels.balanced_weights","text":"default_weights(Y::AbstractVector{L}) where {L<:CLabel}::AbstractVector{<:Number}\n\nReturn a class-rebalancing weight vector, given a label vector Y.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.bestguess","page":"Home","title":"SoleModels.bestguess","text":"bestguess(\n    labels::AbstractVector{<:Label},\n    weights::Union{Nothing,AbstractVector} = nothing;\n    suppress_parity_warning = false,\n)\n\nReturn the best guess for a set of labels; that is, the label that best approximates the labels provided. For classification labels, this function returns the majority class; for regression labels, the average value. If no labels are provided, nothing is returned. The computation can be weighted.\n\nSee also CLabel, RLabel, Label.\n\n\n\n\n\n","category":"function"},{"location":"#SoleModels.check_model_constraints","page":"Home","title":"SoleModels.check_model_constraints","text":"This function is used when constructing ConstrainedModels to check that the inner models satisfy the desired type constraints.\n\nSee also ConstrainedModel, Rule, Branch.\n\n\n\n\n\n","category":"function"},{"location":"#SoleModels.computefeature-Union{Tuple{U}, Tuple{VarFeature{U}, Any}} where U","page":"Home","title":"SoleModels.computefeature","text":"computefeature(f::VarFeature{U}, featchannel; kwargs...)::U where {U}\n\nCompute a feature on a featchannel (i.e., world reading) of an instance.\n\nSee also VarFeature.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.computeunivariatefeature-Union{Tuple{U}, Tuple{SoleModels.AbstractUnivariateFeature{U}, Any}} where U","page":"Home","title":"SoleModels.computeunivariatefeature","text":"computeunivariatefeature(f::AbstractUnivariateFeature{U}, varchannel; kwargs...)::U where {U}\n\nCompute a feature on a variable channel (i.e., world reading) of an instance.\n\nSee also AbstractUnivariateFeature.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.consequent-Tuple{Rule}","page":"Home","title":"SoleModels.consequent","text":"consequent(m::Rule)::AbstractModel\n\nReturn the consequent of a rule.\n\nSee also antecedent, Rule.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.default_weights-Tuple{Integer}","page":"Home","title":"SoleModels.default_weights","text":"default_weights(n::Integer)::AbstractVector{<:Number}\n\nReturn a default weight vector of n values.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.displaymodel-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.displaymodel","text":"printmodel(io::IO, m::AbstractModel; kwargs...)\ndisplaymodel(m::AbstractModel; kwargs...)\n\nprints or returns a string representation of model m.\n\nArguments\n\nheader::Bool = true: when set to true, a header is printed, displaying\n\nthe info structure for m;\n\nshow_subtree_info::Bool = false: when set to true, the header is printed for\n\nmodels in the sub-tree of m;\n\nshow_metrics::Bool = false: when set to true, performance metrics at each point of the\n\nsubtree are shown, whenever they are available in the info structure;\n\nmax_depth::Union{Nothing,Int} = nothing: when it is an Int, models in the sub-tree\n\nwith a depth higher than max_depth are ellipsed with \"...\";\n\nsyntaxstring_kwargs::NamedTuple = (;): kwargs to be passed to syntaxstring for\n\nformatting logical formulas.\n\nSee also SoleLogics.syntaxstring, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.evaluaterule-Union{Tuple{FM}, Tuple{A}, Tuple{O}, Tuple{Rule{O, A, FM}, SoleLogics.AbstractInterpretationSet, AbstractVector{<:Union{AbstractFloat, Integer, String, CategoricalArrays.CategoricalValue}}}} where {O, A, FM<:SoleModels.AbstractModel}","page":"Home","title":"SoleModels.evaluaterule","text":"evaluaterule(\n    r::Rule{O},\n    X::AbstractInterpretationSet,\n    Y::AbstractVector{L}\n) where {O,L<:Label}\n\nEvaluate the rule on a labelled dataset, and return a NamedTuple consisting of:\n\nantsat::Vector{Bool}: satsfaction of the antecedent for each instance in the dataset;\nys::Vector{Union{Nothing,O}}: rule prediction. For each instance in X:\nconsequent(rule) if the antecedent is satisfied,\nnothing otherwise.\n\nSee also Rule, AbstractInterpretationSet, Label, antecedenttops.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.feasiblemodelstype-Union{Tuple{Type{M}}, Tuple{M}, Tuple{O}} where {O, M<:SoleModels.AbstractModel{O}}","page":"Home","title":"SoleModels.feasiblemodelstype","text":"feasiblemodelstype(m::AbstractModel)\n\nReturn a Union of the Feasible Models (FM) allowed in the sub-tree of any AbstractModel. Note that for a ConstrainedModel{O,FM<:AbstractModel}, it simply returns FM.\n\nSee also ConstrainedModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.featvaltype-Union{Tuple{Type{<:VarFeature{U}}}, Tuple{U}} where U","page":"Home","title":"SoleModels.featvaltype","text":"featvaltype(::Type{<:VarFeature{U}}) where {U} = U\nfeatvaltype(::VarFeature{U}) where {U} = U\n\nReturn the output type of the feature function.\n\nSee also AbstractWorld.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.immediatesubmodels-Union{Tuple{SoleModels.AbstractModel{O}}, Tuple{O}} where O","page":"Home","title":"SoleModels.immediatesubmodels","text":"immediatesubmodels(m::AbstractModel)\n\nReturn the list of immediate child models. Note: if the model is a leaf model, then the returned list will be empty.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parsebaseformula(\"p∧q∨r\"), \"YES\", \"NO\");\n\njulia> immediatesubmodels(branch)\n2-element Vector{SoleModels.ConstantModel{String}}:\n SoleModels.ConstantModel{String}\nYES\n\n SoleModels.ConstantModel{String}\nNO\n\njulia> branch2 = Branch(SoleLogics.parsebaseformula(\"s→p\"), branch, 42);\n\n\njulia> printmodel.(immediatesubmodels(branch2));\nBranch\n┐ p ∧ (q ∨ r)\n├ ✔ YES\n└ ✘ NO\n\nConstantModel\n42\n\nSee also submodels, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.info-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.info","text":"info(m::AbstractModel)::NamedTuple = m.info\ninfo(m::AbstractModel, key) = m.info[key]\ninfo(m::AbstractModel, key, defaultval)\ninfo!(m::AbstractModel, key, val)\n\nReturn the info structure for model m; this structure is used for storing additional information that does not affect the model's behavior. This structure can hold, for example, information about the model's statistical performance during the learning phase.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.isminifiable-Tuple{Any}","page":"Home","title":"SoleModels.isminifiable","text":"isminifiable(::Any)::Bool\n\nReturn whether minification can be applied on a dataset structure. See also minify.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.issymbolic-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.issymbolic","text":"issymbolic(::AbstractModel)::Bool\n\nReturn whether a model is symbolic or not. A model is said to be symbolic when its application relies on checking formulas of a certain logical language (see SoleLogics package) on the instance. Symbolic models provide a form of transparent and interpretable modeling, as a symbolic model can be synthethised into a set of mutually exclusive logical rules that can often be translated into natural language.\n\nExamples of purely symbolic models are Rules, Branch, DecisionLists and DecisionTrees. Examples of non-symbolic models are those encoding algebraic mathematical functions (e.g., neural networks). Note that DecisionForests are not purely symbolic, as they rely on an algebraic aggregation step.\n\nSee also apply, listrules, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.joinrules","page":"Home","title":"SoleModels.joinrules","text":"joinrules(rules::AbstractVector{<:Rule})::Vector{<:Rule}\n\nReturn a set of rules, with exactly one rule per different outcome from the input set of rules. For each outcome, the output rule is computed as the logical disjunction of the antecedents of the input rules for that outcome.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p\"), Branch(SoleLogics.parseformula(\"q\"), \"YES\", \"NO\"), \"NO\")\n p\n├✔ q\n│├✔ YES\n│└✘ NO\n└✘ NO\n\n\njulia> printmodel.(listrules(branch); tree_mode = true);\n▣ p ∧ q\n└✔ YES\n\n▣ p ∧ ¬q\n└✔ NO\n\n▣ ¬p\n└✔ NO\n\njulia> printmodel.(joinrules(listrules(branch)); tree_mode = true);\n▣ (p ∧ q)\n└✔ YES\n\n▣ (p ∧ ¬q) ∨ ¬p\n└✔ NO\n\n\nSee also listrules, issymbolic, DISJUNCTION, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"function"},{"location":"#SoleModels.listimmediaterules-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.listimmediaterules","text":"listimmediaterules(m::AbstractModel{O} where {O})::Rule{<:O}\n\nList the immediate rules equivalent to a symbolic model.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p\"), Branch(SoleLogics.parseformula(\"q\"), \"YES\", \"NO\"), \"NO\")\n p\n├✔ q\n│├✔ YES\n│└✘ NO\n└✘ NO\n\n\njulia> printmodel.(listimmediaterules(branch); tree_mode = true);\n▣ p\n└✔ q\n ├✔ YES\n └✘ NO\n\n▣ ¬(p)\n└✔ NO\n\n\n\nSee also listrules, issymbolic, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.listrules-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.listrules","text":"listrules(\n    m::AbstractModel;\n    use_shortforms::Bool = true,\n    use_leftmostlinearform::Bool = false,\n    normalize::Bool = false,\n    force_syntaxtree::Bool = false,\n)::Vector{<:Rule}\n\nReturn a list of rules capturing the knowledge enclosed in symbolic model. The behavior of any symbolic model can be synthesised and represented as a set of mutually exclusive (and jointly exaustive, if the model is closed) rules, which can be useful for many purposes.\n\nThe keyword argument force_syntaxtree, when set to true, causes the logical antecedents in the returned rules to be represented as SyntaxTrees, as opposed to other syntax structure (e.g., LeftmostConjunctiveForm).\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p\"), Branch(SoleLogics.parseformula(\"q\"), \"YES\", \"NO\"), \"NO\")\n p\n├✔ q\n│├✔ YES\n│└✘ NO\n└✘ NO\n\n\njulia> printmodel.(listrules(branch); tree_mode = true);\n▣ p ∧ q\n└✔ YES\n\n▣ p ∧ ¬q\n└✔ NO\n\n▣ ¬p\n└✔ NO\n\n\nSee also listimmediaterules, joinrules, issymbolic, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.minify-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T<:Union{Missing, Nothing, Real}","page":"Home","title":"SoleModels.minify","text":"minify(dataset::D1)::Tuple{D2,Function} where {D1,D2}\n\nReturn a minified version of a dataset, as well as a backmap for reverting to the original dataset. Dataset minification remaps each scalar values in the dataset to a new value such that the overall order of the values is preserved; the output dataset is smaller in size, since it relies on values of type UInt8, UInt16, UInt32, etc.\n\nSee also isminifiable.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.naturalgrouping-Tuple{DataFrames.AbstractDataFrame}","page":"Home","title":"SoleModels.naturalgrouping","text":"naturalgrouping(\n    X::AbstractDataFrame;\n    allow_variable_drop = false,\n)::AbstractVector{<:AbstractVector{<:Symbol}}\n\nReturn variables grouped by their logical nature; the nature of a variable is automatically derived from its type (e.g., Real, Vector{<:Real} or Matrix{<:Real}) and frame. All instances must have the same frame (e.g., channel size/number of worlds).\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.negconsequent-Tuple{Branch}","page":"Home","title":"SoleModels.negconsequent","text":"negconsequent(m::Branch)::AbstractModel\n\nReturn the negative consequent of a branch; that is, the model to be applied if the antecedent evaluates to false.\n\nSee also antecedent, Branch.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.outcometype-Union{Tuple{Type{<:SoleModels.AbstractModel{O}}}, Tuple{O}} where O","page":"Home","title":"SoleModels.outcometype","text":"outcometype(::Type{<:AbstractModel{O}}) where {O} = O\noutcometype(m::AbstractModel) = outcometype(typeof(m))\n\nReturn the outcome type of a model (type).\n\nSee also AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.outputtype-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.outputtype","text":"outputtype(m::AbstractModel)\n\nReturn a supertype for the outputs obtained when applying a model. The result depends on whether the model is open or closed:\n\noutputtype(M::AbstractModel{O}) = isopen(M) ? Union{Nothing,O} : O\n\nNote that if the model is closed, then outputtype(m) is equal to outcometype(m).\n\nSee also isopen, apply, outcometype, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.posconsequent-Tuple{Branch}","page":"Home","title":"SoleModels.posconsequent","text":"posconsequent(m::Branch)::AbstractModel\n\nReturn the positive consequent of a branch; that is, the model to be applied if the antecedent evaluates to true.\n\nSee also antecedent, Branch.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.printmodel-Tuple{IO, SoleModels.AbstractModel}","page":"Home","title":"SoleModels.printmodel","text":"printmodel(io::IO, m::AbstractModel; kwargs...)\ndisplaymodel(m::AbstractModel; kwargs...)\n\nprints or returns a string representation of model m.\n\nArguments\n\nheader::Bool = true: when set to true, a header is printed, displaying\n\nthe info structure for m;\n\nshow_subtree_info::Bool = false: when set to true, the header is printed for\n\nmodels in the sub-tree of m;\n\nshow_metrics::Bool = false: when set to true, performance metrics at each point of the\n\nsubtree are shown, whenever they are available in the info structure;\n\nmax_depth::Union{Nothing,Int} = nothing: when it is an Int, models in the sub-tree\n\nwith a depth higher than max_depth are ellipsed with \"...\";\n\nsyntaxstring_kwargs::NamedTuple = (;): kwargs to be passed to syntaxstring for\n\nformatting logical formulas.\n\nSee also SoleLogics.syntaxstring, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.propagate_feasiblemodels-Tuple{Type{<:SoleModels.AbstractModel}}","page":"Home","title":"SoleModels.propagate_feasiblemodels","text":"propagate_feasiblemodels(M::Type{<:AbstractModel}) = Union{typename(M){outcometype(M)}, feasiblemodelstype(M)}\npropagate_feasiblemodels(m::AbstractModel) = propagate_feasiblemodels(typeof(m))\n\nThis function is used upon construction of a ConstrainedModel, to compute its Feasible Models (FM). In general, its FM are a Union of the FM of its immediate child models, but a trick is used in order to avoid unneccessary propagation of types throughout the model tree. Note that this trick assumes that the first type parameter of any ConstrainedModel is its outcometype O.\n\nSee also feasiblemodelstype, ConstrainedModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.readmetrics-Union{Tuple{SoleModels.LeafModel{L}}, Tuple{L}} where L<:Union{AbstractFloat, Integer, String, CategoricalArrays.CategoricalValue}","page":"Home","title":"SoleModels.readmetrics","text":"readmetrics(m::AbstractModel; kwargs...)\n\nReturn a NamedTuple with some performance metrics for the given symbolic model. Performance metrics can be computed when the info structure of the model:     - :supportinglabels     - :supportingpredictions\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.representatives-Union{Tuple{W}, Tuple{SoleLogics.AbstractFrame{W}, W, SoleLogics.AbstractRelation, ScalarMetaCondition}} where W<:SoleLogics.AbstractWorld","page":"Home","title":"SoleModels.representatives","text":"function representatives(\n    fr::AbstractFrame{W},\n    S::W,\n    ::AbstractRelation,\n    ::ScalarMetaCondition\n) where {W<:AbstractWorld}\n\nReturn an iterator to the (few) representative accessible worlds that are really necessary, upon collation, for computing and propagating truth values through existential modal operators.\n\nThis allows for some optimizations when model checking specific conditional formulas. For example, it turns out that when you need to test a formula \"⟨L⟩ (MyFeature ≥ 10)\" on a world w, instead of computing \"MyFeature\" on all worlds and then maximizing, computing it on a single world is enough to decide the truth. A few cases arise depending on the relation, the feature and the test operator (or, better, its aggregator).\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.representatives-Union{Tuple{W}, Tuple{SoleLogics.AbstractFrame{W}, W, SoleLogics.AbstractRelation, SoleModels.AbstractCondition}} where W<:SoleLogics.AbstractWorld","page":"Home","title":"SoleModels.representatives","text":"function representatives(\n    fr::AbstractFrame{W},\n    S::W,\n    ::AbstractRelation,\n    ::AbstractCondition\n) where {W<:AbstractWorld}\n\nReturn an iterator to the (few) representative accessible worlds that are really necessary, upon collation, for computing and propagating truth values through existential modal operators.\n\nThis allows for some optimizations when model checking specific conditional formulas. For example, with scalar conditions, it turns out that when you need to test a formula \"⟨L⟩ (MyFeature ≥ 10)\" on a world w, instead of computing \"MyFeature\" on all worlds and then maximizing, computing it on a single world is enough to decide the truth. A few cases arise depending on the relation, the feature and the test operator (or, better, its aggregator).\n\nNote that this method fallsback to accessibles.\n\nSee also accessibles, ScalarCondition, AbstractFrame.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.rulemetrics-Union{Tuple{FM}, Tuple{A}, Tuple{O}, Tuple{Rule{O, A, FM}, SoleLogics.AbstractInterpretationSet, AbstractVector{<:Union{AbstractFloat, Integer, String, CategoricalArrays.CategoricalValue}}}} where {O, A, FM<:SoleModels.AbstractModel}","page":"Home","title":"SoleModels.rulemetrics","text":"rulemetrics(\n    r::Rule,\n    X::AbstractInterpretationSet,\n    Y::AbstractVector{<:Label}\n)\n\nCalculate metrics for a rule with respect to a labelled dataset and returns a NamedTuple consisting of:\n\nsupport: number of instances satisfying the antecedent of the rule divided by   the total number of instances;\nerror:\nFor classification problems: number of instances that were not classified\ncorrectly divided by the total number of instances;\nFor regression problems: mean squared error;\nlength: number of propositions in the rule's antecedent.\n\nSee also Rule, AbstractInterpretationSet, Label, evaluaterule, ninstances, outcometype, consequent.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.scalarlogiset","page":"Home","title":"SoleModels.scalarlogiset","text":"scalarlogiset(dataset, features::AbstractVector{<:VarFeature})\n\nConverts a dataset structure (with variables) to a logiset with scalar-valued features. If dataset is not a multimodal dataset, the following methods should be defined:\n\n    initlogiset(dataset, features::AbstractVector{<:VarFeature})\n    ninstances(dataset)\n    nvariables(dataset)\n    frame(dataset, i_instance::Integer)\n    featvalue(dataset, i_instance::Integer, w::AbstractWorld, feature::VarFeature)\n    vareltype(dataset, i_variable::Integer)\n\nIf dataset represents a multimodal dataset, the following methods should be defined, while its modalities (iterated via eachmodality) should provide the methods above:\n\n    ismultilogiseed(dataset)\n    nmodalities(dataset)\n    eachmodality(dataset)\n\nSee also AbstractLogiset, VarFeature, ScalarCondition.\n\n\n\n\n\n","category":"function"},{"location":"#SoleModels.submodels-Tuple{SoleModels.AbstractModel}","page":"Home","title":"SoleModels.submodels","text":"submodels(m::AbstractModel)\n\nEnumerate all submodels in the sub-tree. This function is the transitive closure of immediatesubmodels; in fact, the returned list includes the immediate submodels (immediatesubmodels(m)), but also their immediate submodels, and so on.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parsebaseformula(\"p∧q∨r\"), \"YES\", \"NO\");\n\njulia> submodels(branch)\n2-element Vector{SoleModels.ConstantModel{String}}:\n ConstantModel\nYES\n\n ConstantModel\nNO\n\n\njulia> branch2 = Branch(SoleLogics.parsebaseformula(\"s→p\"), branch, 42);\n\njulia> printmodel.(submodels(branch2));\nBranch\n┐ p ∧ (q ∨ r)\n├ ✔ YES\n└ ✘ NO\n\nConstantModel\nYES\n\nConstantModel\nNO\n\nConstantModel\n42\n\njulia> submodels(branch) == immediatesubmodels(branch)\ntrue\n\njulia> submodels(branch2) == immediatesubmodels(branch2)\nfalse\n\nSee also immediatesubmodels, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.variable_name-Tuple{SoleModels.AbstractUnivariateFeature}","page":"Home","title":"SoleModels.variable_name","text":"function variable_name(\n    f::AbstractUnivariateFeature;\n    variable_names_map::Union{Nothing,AbstractDict,AbstractVector} = nothing,\n    variable_name_prefix::Union{Nothing,String} = \"V\",\n)::String\n\nReturn the name of the variable targeted by a univariate feature. By default, an variable name is a number prefixed by \"V\"; however, variable_names_map or variable_name_prefix can be used to customize variable names. The prefix can be customized by specifying variable_name_prefix. Alternatively, a mapping from string to integer (either via a Dictionary or a Vector) can be passed as variable_names_map. Note that only one in variable_names_map and variable_name_prefix should be provided.\n\nSee also parsecondition, ScalarCondition, syntaxstring.\n\n\n\n\n\n","category":"method"},{"location":"#SoleModels.wrap-Tuple{Any, Type{<:SoleModels.AbstractModel}}","page":"Home","title":"SoleModels.wrap","text":"wrap(o::Any)::AbstractModel\n\nThis function wraps anything into an AbstractModel. The default behavior is the following:\n\nwhen called on an AbstractModel, the model is\n\nsimply returned (no wrapping is performed);\n\nFunctions and FunctionWrappers are wrapped into a FunctionModel;\nevery other object is wrapped into a ConstantModel.\n\nSee also ConstantModel, FunctionModel, ConstrainedModel, LeafModel.\n\n\n\n\n\n","category":"method"}]
}
