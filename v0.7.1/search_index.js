var documenterSearchIndex = {"docs":
[{"location":"parse/","page":"Parsing models from other frameworks","title":"Parsing models from other frameworks","text":"CurrentModule = SoleModels","category":"page"},{"location":"parse/#Parsers","page":"Parsing models from other frameworks","title":"Parsers","text":"","category":"section"},{"location":"parse/","page":"Parsing models from other frameworks","title":"Parsing models from other frameworks","text":"Modules = [SoleModels]\nPages   = [\"parse.jl\"]","category":"page"},{"location":"models/","page":"Symbolic models","title":"Symbolic models","text":"CurrentModule = SoleModels","category":"page"},{"location":"models/#Symbolic-models","page":"Symbolic models","title":"Symbolic models","text":"","category":"section"},{"location":"models/","page":"Symbolic models","title":"Symbolic models","text":"Modules = [SoleModels]\nPages   = [\"base.jl\"]","category":"page"},{"location":"models/","page":"Symbolic models","title":"Symbolic models","text":"ConstantModel\nFunctionModel\nRule\nBranch\nDecisionList\nDecisionTree\nDecisionForest\nprintmodel","category":"page"},{"location":"models/#SoleModels.printmodel","page":"Symbolic models","title":"SoleModels.printmodel","text":"printmodel(io::IO, m::AbstractModel; kwargs...)\ndisplaymodel(m::AbstractModel; kwargs...)\n\nprints or returns a string representation of model m.\n\nArguments\n\nheader::Bool = true: when set to true, a header is printed, displaying the info structure for m;\nshow_subtree_info::Bool = false: when set to true, the header is printed for models in the sub-tree of m;\nshow_metrics::Bool = false: when set to true, performance metrics at each point of the subtree are shown, whenever they are available in the info structure;\nmax_depth::Union{Nothing,Int} = nothing: when it is an Int, models in the sub-tree with a depth higher than max_depth are ellipsed with \"...\";\nsyntaxstring_kwargs::NamedTuple = (;): kwargs to be passed to syntaxstring for formatting logical formulas.\n\nSee also syntaxstring, AbstractModel.\n\n\n\n\n\n","category":"function"},{"location":"models/#Evaluating-symbolic-models","page":"Symbolic models","title":"Evaluating symbolic models","text":"","category":"section"},{"location":"models/","page":"Symbolic models","title":"Symbolic models","text":"Modules = [SoleModels]\nPages   = [\"evaluation.jl\"]","category":"page"},{"location":"models/#Manipulating-symbolic-knowledge","page":"Symbolic models","title":"Manipulating symbolic knowledge","text":"","category":"section"},{"location":"models/","page":"Symbolic models","title":"Symbolic models","text":"Modules = [SoleModels]\nPages   = [\"symbolic-utils.jl\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SoleModels","category":"page"},{"location":"#SoleModels","page":"Home","title":"SoleModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for SoleModels, the first ever framework for symbolic learning. This package provides the basic structures for representing symbolic models. Note that it does not provide any implementation of symbolic learning algorithms. At the current state, ModalDecisionTrees is the only implemented algorithm that is Sole-compatible.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"autodocs/","page":"Full reference","title":"Full reference","text":"CurrentModule = SoleModels","category":"page"},{"location":"autodocs/#Full-Reference","page":"Full reference","title":"Full Reference","text":"","category":"section"},{"location":"autodocs/","page":"Full reference","title":"Full reference","text":"","category":"page"},{"location":"autodocs/","page":"Full reference","title":"Full reference","text":"Modules = [SoleModels]","category":"page"},{"location":"autodocs/#SoleModels.AbstractModel","page":"Full reference","title":"SoleModels.AbstractModel","text":"abstract type AbstractModel{O} end\n\nAbstract type for symbolic models that, given an instance object (i.e., a piece of data), output an outcome of type O.\n\nA model is said to be symbolic when its application relies on checking formulas of a certain logical language (see SoleLogics.jl package) on the instance. Symbolic models provide a form of transparent and interpretable modeling, as a symbolic model can be synthethised into a set of mutually exclusive logical rules that can often be translated into natural language.\n\nExamples of symbolic models are Rules, Branches, DecisionLists and DecisionTrees. Examples of non-symbolic (or sub-symbolic) models include those encoding algebraic mathematical functions (e.g., neural networks).\n\nSymbolic models can wrap other AbstractModels, and use them to compute the outcome. As such, an AbstractModel can actually be the result of a composition of many models, and enclose a tree of AbstractModels (with LeafModels at the leaves).\n\nSee also LeafModel, Rule, Branch, isopen, apply, info, outcometype.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.Branch","page":"Full reference","title":"SoleModels.Branch","text":"struct Branch{O,A<:Formula} <: AbstractModel{O}\n    antecedent::A\n    posconsequent::M where {M<:AbstractModel{<:O}}\n    negconsequent::M where {M<:AbstractModel{<:O}}\n    info::NamedTuple\nend\n\nA Branch is one of the fundamental building blocks of symbolic modeling, and has the semantics:\n\nIF (antecedent) THEN (positive consequent) ELSE (negative consequent) END\n\nwhere the antecedent is a formula to be checked and the consequents are the feasible local outcomes of the block. If checking the antecedent evaluates to the top of the algebra, then the positive consequent is applied; otherwise, the negative consequenti is applied.\n\nSee also antecedent, posconsequent, negconsequent, SoleLogics.check, SoleLogics.Formula, Rule, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.ConstantModel","page":"Full reference","title":"SoleModels.ConstantModel","text":"struct ConstantModel{O} <: LeafModel{O}\n    outcome::O\n    info::NamedTuple\nend\n\nThe simplest type of model is the ConstantModel; it is a LeafModel that always outputs the same outcome.\n\nExamples\n\njulia> SoleModels.LeafModel(2) isa SoleModels.ConstantModel\n\njulia> SoleModels.LeafModel(sum) isa SoleModels.FunctionModel\n┌ Warning: Over efficiency concerns, please consider wrappingJulia Function's into FunctionWrapper{O,Tuple{SoleModels.AbstractInterpretation}} structures,where O is their return type.\n└ @ SoleModels ~/.julia/dev/SoleModels/src/base.jl:337\ntrue\n\n\nSee also apply, FunctionModel, LeafModel.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.DecisionForest","page":"Full reference","title":"SoleModels.DecisionForest","text":"A Decision Forest is a symbolic model that wraps an ensemble of models\n\nstruct DecisionForest{O,A<:Formula} <: AbstractModel{O}\n    trees::Vector{<:DecisionTree}\n    info::NamedTuple\nend\n\nSee also MixedModel, DecisionList, DecisionTree.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.DecisionList","page":"Full reference","title":"SoleModels.DecisionList","text":"struct DecisionList{O,A<:Formula} <: AbstractModel{O}\n    rulebase::Vector{Rule{_O,_C} where {_O<:O,_C<:A}}\n    defaultconsequent::M where {M<:AbstractModel{<:O}}\n    info::NamedTuple\nend\n\nA DecisionList (or decision table, or rule-based model) is a symbolic model that has the semantics of an IF-ELSEIF-ELSE block:\n\nIF (antecedent_1)     THEN (consequent_1)\nELSEIF (antecedent_2) THEN (consequent_2)\n...\nELSEIF (antecedent_n) THEN (consequent_n)\nELSE (consequent_default) END\n\nwhere the antecedents are formulas to be, and the consequents are the feasible local outcomes of the block. Using the classical semantics, the antecedents are evaluated in order, and a consequent is returned as soon as a valid antecedent is found, or when the computation reaches the ELSE clause.\n\nSee also Rule, DecisionTree, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.DecisionTree","page":"Full reference","title":"SoleModels.DecisionTree","text":"A DecisionTree is a symbolic model that operates as a nested structure of IF-THEN-ELSE blocks:\n\nIF (antecedent_1) THEN\n    IF (antecedent_2) THEN\n        (consequent_1)\n    ELSE\n        (consequent_2)\n    END\nELSE\n    IF (antecedent_3) THEN\n        (consequent_3)\n    ELSE\n        (consequent_4)\n    END\nEND\n\nwhere the antecedents are formulas to be, and the consequents are the feasible local outcomes of the block.\n\nIn practice, a DecisionTree simply wraps a constrained sub-tree of Branch and LeafModel:\n\nstruct DecisionTree{O,A<:Formula} <: AbstractModel{O}\n    root::M where {M<:AbstractModel}\n    info::NamedTuple\nend\n\nNote that this structure also includes an info::NamedTuple for storing additional information.\n\nSee also MixedModel, DecisionList.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.FunctionModel","page":"Full reference","title":"SoleModels.FunctionModel","text":"struct FunctionModel{O} <: LeafModel{O}\n    f::FunctionWrapper{O}\n    info::NamedTuple\nend\n\nA FunctionModel is a LeafModel that applies a native Julia Function in order to compute the outcome. Over efficiency concerns, it is mandatory to make explicit the output type O by wrapping the Function into an object of type FunctionWrapper{O} (see FunctionWrappers.\n\nSee also ConstantModel, LeafModel.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.LeafModel","page":"Full reference","title":"SoleModels.LeafModel","text":"abstract type LeafModel{O} <: AbstractModel{O} end\n\nAbstract type for leaf models, that is, models which outcomes do not depend other models, and represents the bottom of the computation. In general, an AbstractModel can generally wrap other AbstractModels; in such case, the outcome can depend on the inner models being applied on the instance object. Otherwise, the model is considered as a leaf, or final, and is the leaf of a tree of AbstractModels.\n\nSee also ConstantModel, FunctionModel, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.MixedModel","page":"Full reference","title":"SoleModels.MixedModel","text":"A MixedModel is a symbolic model that operaters as a free nested structure of IF-THEN-ELSE and IF-ELSEIF-ELSE blocks:\n\nIF (antecedent_1) THEN\n    IF (antecedent_1)     THEN (consequent_1)\n    ELSEIF (antecedent_2) THEN (consequent_2)\n    ELSE (consequent_1_default) END\nELSE\n    IF (antecedent_3) THEN\n        (consequent_3)\n    ELSE\n        (consequent_4)\n    END\nEND\n\nwhere the antecedents are formulas to be checked, and the consequents are the feasible local outcomes of the block.\n\nIn Sole.jl, this logic can implemented using AbstractModels such as Rules, Branchs, DecisionLists, DecisionTrees, and the be wrapped into a MixedModel:\n\nstruct MixedModel{O,FM<:AbstractModel} <: AbstractModel{O}\n    root::M where {M<:AbstractModel{<:O}}\n    info::NamedTuple\nend\n\nNote that FM refers to the Feasible Models (FM) allowed in the model's sub-tree.\n\nSee also DecisionTree, DecisionList.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#SoleModels.Rule","page":"Full reference","title":"SoleModels.Rule","text":"struct Rule{O,A<:Formula} <: AbstractModel{O}\n    antecedent::A\n    consequent::M where {M<:AbstractModel{<:O}}\n    info::NamedTuple\nend\n\nA Rule is one of the fundamental building blocks of symbolic modeling, and has the semantics:\n\nIF (antecedent) THEN (consequent) END\n\nwhere the antecedent is a formula to be checked, and the consequent is the local outcome of the block.\n\nSee also antecedent, consequent, SoleLogics.Formula, AbstractModel.\n\n\n\n\n\n","category":"type"},{"location":"autodocs/#Base.isopen-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"Base.isopen","text":"isopen(::AbstractModel)::Bool\n\nReturn whether a model is open. An AbstractModel{O} is closed if it is always able to provide an outcome of type O. Otherwise, the model can output nothing values and is referred to as open.\n\nRule is an example of an open model, while Branch is an example of closed model.\n\nSee also AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.antecedent-Tuple{Rule}","page":"Full reference","title":"SoleModels.antecedent","text":"antecedent(m::Union{Rule,Branch})::Formula\n\nReturn the antecedent of a rule/branch, that is, the formula to be checked upon applying the model.\n\nSee also apply, consequent, checkantecedent, Rule, Branch.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.apply-Tuple{SoleModels.AbstractModel, SoleLogics.AbstractInterpretation}","page":"Full reference","title":"SoleModels.apply","text":"apply(\n    m::AbstractModel,\n    i::AbstractInterpretation;\n    check_args::Tuple = (),\n    check_kwargs::NamedTuple = (;),\n    functional_args::Tuple = (),\n    functional_kwargs::NamedTuple = (;),\n    kwargs...\n)::outputtype(m)\n\napply(\n    m::AbstractModel,\n    d::AbstractInterpretationSet;\n    check_args::Tuple = (),\n    check_kwargs::NamedTuple = (;),\n    functional_args::Tuple = (),\n    functional_kwargs::NamedTuple = (;),\n    kwargs...\n)::AbstractVector{<:outputtype(m)}\n\nReturn the output prediction of the model on an instance, or on each instance of a dataset. The predictions can be nothing if the model is open.\n\ncheck_args and check_kwargs can influence check's behavior at the time of its computation (see `SoleLogics.check)\n\nfunctional_args and functional_kwargs can influence FunctionModel's behavior when the corresponding function is applied to AbstractInterpretation (see FunctionModel, `SoleLogics.AbstractInterpretation)\n\nSee also isopen, outcometype, outputtype, AbstractModel, SoleLogics.AbstractInterpretation, SoleLogics.AbstractInterpretationSet.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.checkantecedent","page":"Full reference","title":"SoleModels.checkantecedent","text":"checkantecedent(\n    m::Union{Rule,Branch},\n    args...;\n    kwargs...\n)\n    check(antecedent(m), args...; kwargs...)\nend\n\nSimply check the antecedent of a rule on an instance or dataset.\n\nSee also antecedent, Rule, Branch.\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#SoleModels.consequent-Tuple{Rule}","page":"Full reference","title":"SoleModels.consequent","text":"consequent(m::Rule)::AbstractModel\n\nReturn the consequent of a rule.\n\nSee also antecedent, Rule.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.displaymodel-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.displaymodel","text":"printmodel(io::IO, m::AbstractModel; kwargs...)\ndisplaymodel(m::AbstractModel; kwargs...)\n\nprints or returns a string representation of model m.\n\nArguments\n\nheader::Bool = true: when set to true, a header is printed, displaying the info structure for m;\nshow_subtree_info::Bool = false: when set to true, the header is printed for models in the sub-tree of m;\nshow_metrics::Bool = false: when set to true, performance metrics at each point of the subtree are shown, whenever they are available in the info structure;\nmax_depth::Union{Nothing,Int} = nothing: when it is an Int, models in the sub-tree with a depth higher than max_depth are ellipsed with \"...\";\nsyntaxstring_kwargs::NamedTuple = (;): kwargs to be passed to syntaxstring for formatting logical formulas.\n\nSee also syntaxstring, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.evaluaterule-Tuple{Rule, SoleLogics.AbstractInterpretationSet, AbstractVector{<:Union{AbstractFloat, Integer, String, CategoricalArrays.CategoricalValue}}}","page":"Full reference","title":"SoleModels.evaluaterule","text":"evaluaterule(\n    r::Rule{O},\n    X::AbstractInterpretationSet,\n    Y::AbstractVector{L}\n) where {O,L<:Label}\n\nEvaluate the rule on a labeled dataset, and return a NamedTuple consisting of:\n\nantsat::Vector{Bool}: satsfaction of the antecedent for each instance in the dataset;\nys::Vector{Union{Nothing,O}}: rule prediction. For each instance in X:\nconsequent(rule) if the antecedent is satisfied,\nnothing otherwise.\n\nSee also Rule, SoleLogics.AbstractInterpretationSet, Label, checkantecedent.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.immediatesubmodels-Union{Tuple{SoleModels.AbstractModel{O}}, Tuple{O}} where O","page":"Full reference","title":"SoleModels.immediatesubmodels","text":"immediatesubmodels(m::AbstractModel)\n\nReturn the list of immediate child models. Note: if the model is a leaf model, then the returned list will be empty.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p∧q∨r\"), \"YES\", \"NO\");\n\njulia> immediatesubmodels(branch)\n2-element Vector{SoleModels.ConstantModel{String}}:\n SoleModels.ConstantModel{String}\nYES\n\n SoleModels.ConstantModel{String}\nNO\n\njulia> branch2 = Branch(SoleLogics.parseformula(\"s→p\"), branch, 42);\n\n\njulia> printmodel.(immediatesubmodels(branch2));\nBranch\n┐ p ∧ (q ∨ r)\n├ ✔ YES\n└ ✘ NO\n\nConstantModel\n42\n\nSee also submodels, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.info-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.info","text":"info(m::AbstractModel)::NamedTuple = m.info\ninfo(m::AbstractModel, key) = m.info[key]\ninfo(m::AbstractModel, key, defaultval)\n\ninfo!(m::AbstractModel, info::NamedTuple)\ninfo!(m::AbstractModel, key, val)\n\nReturn the info structure for model m; this structure is used for storing additional information that does not affect the model's behavior. This structure can hold, for example, information about the model's statistical performance during the learning phase.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.joinrules","page":"Full reference","title":"SoleModels.joinrules","text":"joinrules(rules::AbstractVector{<:Rule})::Vector{<:Rule}\n\nReturn a set of rules, with exactly one rule per different outcome from the input set of rules. For each outcome, the output rule is computed as the logical disjunction of the antecedents of the input rules for that outcome.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p\"), Branch(SoleLogics.parseformula(\"q\"), \"YES\", \"NO\"), \"NO\")\n p\n├✔ q\n│├✔ YES\n│└✘ NO\n└✘ NO\n\n\njulia> printmodel.(listrules(branch); tree_mode = true);\n▣ p ∧ q\n└✔ YES\n\n▣ p ∧ ¬q\n└✔ NO\n\n▣ ¬p\n└✔ NO\n\njulia> printmodel.(joinrules(listrules(branch)); tree_mode = true);\n▣ (p ∧ q)\n└✔ YES\n\n▣ (p ∧ ¬q) ∨ ¬p\n└✔ NO\n\n\nSee also listrules, SoleLogics.DISJUNCTION, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#SoleModels.listimmediaterules-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.listimmediaterules","text":"listimmediaterules(m::AbstractModel{O} where {O})::Rule{<:O}\n\nList the immediate rules equivalent to a symbolic model.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p\"), Branch(SoleLogics.parseformula(\"q\"), \"YES\", \"NO\"), \"NO\")\n p\n├✔ q\n│├✔ YES\n│└✘ NO\n└✘ NO\n\n\njulia> printmodel.(listimmediaterules(branch); tree_mode = true);\n▣ p\n└✔ q\n ├✔ YES\n └✘ NO\n\n▣ ¬(p)\n└✔ NO\n\n\n\nSee also listrules, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.listrules-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.listrules","text":"listrules(\n    m::AbstractModel;\n    use_shortforms::Bool = true,\n    use_leftmostlinearform::Bool = false,\n    normalize::Bool = false,\n    force_syntaxtree::Bool = false,\n)::Vector{<:Rule}\n\nReturn a list of rules capturing the knowledge enclosed in symbolic model. The behavior of any symbolic model can be synthesised and represented as a set of mutually exclusive (and jointly exaustive, if the model is closed) rules, which can be useful for many purposes.\n\nThe keyword argument force_syntaxtree, when set to true, causes the logical antecedents in the returned rules to be represented as SyntaxTrees, as opposed to other syntax structure (e.g., LeftmostConjunctiveForm).\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p\"), Branch(SoleLogics.parseformula(\"q\"), \"YES\", \"NO\"), \"NO\")\n p\n├✔ q\n│├✔ YES\n│└✘ NO\n└✘ NO\n\n\njulia> printmodel.(listrules(branch); tree_mode = true);\n▣ p ∧ q\n└✔ YES\n\n▣ p ∧ ¬q\n└✔ NO\n\n▣ ¬p\n└✔ NO\n\n\nSee also listimmediaterules, SoleLogics.CONJUNCTION, joinrules, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.negconsequent-Tuple{Branch}","page":"Full reference","title":"SoleModels.negconsequent","text":"negconsequent(m::Branch)::AbstractModel\n\nReturn the negative consequent of a branch; that is, the model to be applied if the antecedent evaluates to false.\n\nSee also antecedent, Branch.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.outcometype-Union{Tuple{Type{<:SoleModels.AbstractModel{O}}}, Tuple{O}} where O","page":"Full reference","title":"SoleModels.outcometype","text":"outcometype(::Type{<:AbstractModel{O}}) where {O} = O\noutcometype(m::AbstractModel) = outcometype(typeof(m))\n\nReturn the outcome type of a model (type).\n\nSee also AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.outputtype-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.outputtype","text":"outputtype(m::AbstractModel)\n\nReturn a supertype for the outputs obtained when applying a model. The result depends on whether the model is open or closed:\n\noutputtype(M::AbstractModel{O}) = isopen(M) ? Union{Nothing,O} : O\n\nNote that if the model is closed, then outputtype(m) is equal to outcometype(m).\n\nSee also isopen, apply, outcometype, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.parse_orange_decision_list","page":"Full reference","title":"SoleModels.parse_orange_decision_list","text":"parse_orange_decision_list(decision_list, ignoredefaultrule = false; featuretype = SoleData.VariableValue)\n\nParser for orange-style decision lists. Reference: https://orange3.readthedocs.io/projects/orange-visual-programming/en/latest/widgets/model/cn2ruleinduction.html\n\nArguments\n\ndecision_list is an AbstractString containing the orange-style representation of a decision list;\nignoredefaultrule is an optional, Boolean parameter indicating whether to use the default rule   as the default rule for the resulting decision list.   When false, the last rule is ignored, and the second last is used as the default rule;\nfeaturetype specifies the feature type used in the parsed ScalarConditions.\n\nExamples\n\njulia> dl = \"\n[49, 0, 0] IF petal length<=3.0 AND sepal width>=2.9 THEN iris=Iris-setosa  -0.0\n[0, 0, 39] IF petal width>=1.8 AND sepal length>=6.0 THEN iris=Iris-virginica  -0.0\n[0, 8, 0] IF sepal length>=4.9 AND sepal width>=3.1 THEN iris=Iris-versicolor  -0.0\n[0, 0, 2] IF petal length<=4.9 AND petal width>=1.7 THEN iris=Iris-virginica  -0.0\n[0, 0, 5] IF petal width>=1.8 THEN iris=Iris-virginica  -0.0\n[0, 35, 0] IF petal length<=5.0 AND sepal width>=2.4 THEN iris=Iris-versicolor  -0.0\n[0, 0, 2] IF sepal width>=2.8 THEN iris=Iris-virginica  -0.0\n[0, 3, 0] IF petal width<=1.0 AND sepal length>=5.0 THEN iris=Iris-versicolor  -0.0\n[0, 1, 0] IF sepal width>=2.7 THEN iris=Iris-versicolor  -0.0\n[0, 0, 1] IF sepal width>=2.6 THEN iris=Iris-virginica  -0.0\n[0, 2, 0] IF sepal length>=5.5 AND sepal length>=6.2 THEN iris=Iris-versicolor  -0.0\n[0, 1, 0] IF sepal length<=5.5 AND petal length>=4.0 THEN iris=Iris-versicolor  -0.0\n[0, 0, 1] IF sepal length>=6.0 THEN iris=Iris-virginica  -0.0\n[1, 0, 0] IF sepal length<=4.5 THEN iris=Iris-setosa  -0.0\n[50, 50, 50] IF TRUE THEN iris=Iris-setosa  -1.584962500721156\n\" |> SoleModels.parse_orange_decision_list\n\njulia> listrules(dl; normalize = true)\n15-element Vector{ClassificationRule{String, A, SoleModels.ConstantModel{String}} where A<:Formula}:\n ▣ ((:petal_length ≤ 3.0) ∧ (:sepal_width ≥ 2.9))  ↣  Iris-setosa\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width ≥ 1.8) ∧ (:sepal_length ≥ 6.0))  ↣  Iris-virginica\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length ≥ 4.9) ∧ (:sepal_width ≥ 3.1))  ↣  Iris-versicolor\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length ≤ 4.9) ∧ (:petal_width ≥ 1.7))  ↣  Iris-virginica\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width ≥ 1.8)  ↣  Iris-virginica\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length ≤ 5.0) ∧ (:sepal_width ≥ 2.4))  ↣  Iris-versicolor\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width ≥ 2.8)  ↣  Iris-virginica\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width ≤ 1.0) ∧ (:sepal_length ≥ 5.0))  ↣  Iris-versicolor\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width ≥ 2.7)  ↣  Iris-versicolor\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width < 2.7) ∧ (:sepal_width ≥ 2.6)  ↣  Iris-virginica\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width < 2.7) ∧ (:sepal_width < 2.6) ∧ ((:sepal_length ≥ 5.5) ∧ (:sepal_length ≥ 6.2))  ↣  Iris-versicolor\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width < 2.7) ∧ (:sepal_width < 2.6) ∧ ((:sepal_length < 5.5) ∨ (:sepal_length < 6.2)) ∧ ((:sepal_length ≤ 5.5) ∧ (:petal_length ≥ 4.0))  ↣  Iris-versicolor\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width < 2.7) ∧ (:sepal_width < 2.6) ∧ ((:sepal_length < 5.5) ∨ (:sepal_length < 6.2)) ∧ ((:sepal_length > 5.5) ∨ (:petal_length < 4.0)) ∧ (:sepal_length ≥ 6.0)  ↣  Iris-virginica\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width < 2.7) ∧ (:sepal_width < 2.6) ∧ ((:sepal_length < 5.5) ∨ (:sepal_length < 6.2)) ∧ ((:sepal_length > 5.5) ∨ (:petal_length < 4.0)) ∧ (:sepal_length < 6.0) ∧ (:sepal_length ≤ 4.5)  ↣  Iris-setosa\n\n ▣ ((:petal_length > 3.0) ∨ (:sepal_width < 2.9)) ∧ ((:petal_width < 1.8) ∨ (:sepal_length < 6.0)) ∧ ((:sepal_length < 4.9) ∨ (:sepal_width < 3.1)) ∧ ((:petal_length > 4.9) ∨ (:petal_width < 1.7)) ∧ (:petal_width < 1.8) ∧ ((:petal_length > 5.0) ∨ (:sepal_width < 2.4)) ∧ (:sepal_width < 2.8) ∧ ((:petal_width > 1.0) ∨ (:sepal_length < 5.0)) ∧ (:sepal_width < 2.7) ∧ (:sepal_width < 2.6) ∧ ((:sepal_length < 5.5) ∨ (:sepal_length < 6.2)) ∧ ((:sepal_length > 5.5) ∨ (:petal_length < 4.0)) ∧ (:sepal_length < 6.0) ∧ (:sepal_length > 4.5)  ↣  Iris-setosa\n\n\nSee also DecisionList.\n\n\n\n\n\n","category":"function"},{"location":"autodocs/#SoleModels.posconsequent-Tuple{Branch}","page":"Full reference","title":"SoleModels.posconsequent","text":"posconsequent(m::Branch)::AbstractModel\n\nReturn the positive consequent of a branch; that is, the model to be applied if the antecedent evaluates to true.\n\nSee also antecedent, Branch.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.printmodel-Tuple{IO, SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.printmodel","text":"printmodel(io::IO, m::AbstractModel; kwargs...)\ndisplaymodel(m::AbstractModel; kwargs...)\n\nprints or returns a string representation of model m.\n\nArguments\n\nheader::Bool = true: when set to true, a header is printed, displaying the info structure for m;\nshow_subtree_info::Bool = false: when set to true, the header is printed for models in the sub-tree of m;\nshow_metrics::Bool = false: when set to true, performance metrics at each point of the subtree are shown, whenever they are available in the info structure;\nmax_depth::Union{Nothing,Int} = nothing: when it is an Int, models in the sub-tree with a depth higher than max_depth are ellipsed with \"...\";\nsyntaxstring_kwargs::NamedTuple = (;): kwargs to be passed to syntaxstring for formatting logical formulas.\n\nSee also syntaxstring, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.rulemetrics-Tuple{Rule, SoleLogics.AbstractInterpretationSet, AbstractVector{<:Union{AbstractFloat, Integer, String, CategoricalArrays.CategoricalValue}}}","page":"Full reference","title":"SoleModels.rulemetrics","text":"rulemetrics(\n    r::Rule,\n    X::AbstractInterpretationSet,\n    Y::AbstractVector{<:Label}\n)\n\nCompute metrics for a rule with respect to a labeled dataset and returns a NamedTuple consisting of:\n\nsupport: number of instances satisfying the antecedent of the rule divided by   the total number of instances;\nerror:\nFor classification problems: number of instances that were not classified\ncorrectly divided by the total number of instances;\nFor regression problems: mean squared error;\nlength: number of atoms in the rule's antecedent.\n\nSee also Rule, SoleLogics.AbstractInterpretationSet, Label, evaluaterule, outcometype, consequent.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.submodels-Tuple{SoleModels.AbstractModel}","page":"Full reference","title":"SoleModels.submodels","text":"submodels(m::AbstractModel)\n\nEnumerate all submodels in the sub-tree. This function is the transitive closure of immediatesubmodels; in fact, the returned list includes the immediate submodels (immediatesubmodels(m)), but also their immediate submodels, and so on.\n\nExamples\n\njulia> using SoleLogics\n\njulia> branch = Branch(SoleLogics.parseformula(\"p∧q∨r\"), \"YES\", \"NO\");\n\njulia> submodels(branch)\n2-element Vector{SoleModels.ConstantModel{String}}:\n ConstantModel\nYES\n\n ConstantModel\nNO\n\n\njulia> branch2 = Branch(SoleLogics.parseformula(\"s→p\"), branch, 42);\n\njulia> printmodel.(submodels(branch2));\nBranch\n┐ p ∧ (q ∨ r)\n├ ✔ YES\n└ ✘ NO\n\nConstantModel\nYES\n\nConstantModel\nNO\n\nConstantModel\n42\n\njulia> submodels(branch) == immediatesubmodels(branch)\ntrue\n\njulia> submodels(branch2) == immediatesubmodels(branch2)\nfalse\n\nSee also immediatesubmodels, LeafModel, AbstractModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs/#SoleModels.wrap-Tuple{Any, Type{<:SoleModels.AbstractModel}}","page":"Full reference","title":"SoleModels.wrap","text":"wrap(o::Any)::AbstractModel\n\nThis function wraps anything into an AbstractModel. The default behavior is the following:\n\nwhen called on an AbstractModel, the model is\n\nsimply returned (no wrapping is performed);\n\nFunctions and FunctionWrappers are wrapped into a FunctionModel;\nevery other object is wrapped into a ConstantModel.\n\nSee also ConstantModel, FunctionModel, LeafModel.\n\n\n\n\n\n","category":"method"},{"location":"logic/","page":"Logical foundations","title":"Logical foundations","text":"CurrentModule = SoleModels","category":"page"},{"location":"logic/#Logical-foundations","page":"Logical foundations","title":"Logical foundations","text":"","category":"section"},{"location":"logic/","page":"Logical foundations","title":"Logical foundations","text":"SoleLogics lays the logical foundations for this package. While the full reference for SoleLogics can be found here, these are the basic logical concepts needed for symbolic modelling.","category":"page"},{"location":"logic/","page":"Logical foundations","title":"Logical foundations","text":"SoleLogics.Atom\nSoleLogics.CONJUNCTION\nSoleLogics.DISJUNCTION\nSoleLogics.Formula\nSoleLogics.syntaxstring\n\nSoleLogics.AbstractAlphabet\nSoleLogics.AbstractInterpretation\nSoleLogics.AbstractInterpretationSet\n\nSoleLogics.check\n\nSoleLogics.AbstractWorld\nSoleLogics.GeometricalWorld\nSoleLogics.Interval\nSoleLogics.Interval2D\n\nSoleLogics.AbstractRelation\nSoleLogics.globalrel\nSoleLogics.IA_L\n\nSoleLogics.AbstractFrame\nSoleLogics.AbstractKripkeStructure\nSoleLogics.accessibles","category":"page"},{"location":"logic/#SoleLogics.Atom","page":"Logical foundations","title":"SoleLogics.Atom","text":"struct Atom{V} <: SyntaxLeaf\n    value::V\nend\n\nAn atom, sometimes called an atomic proposition, propositional letter (or simply letter), of type Atom{V} wraps a value::V representing a fact which truth can be assessed on a logical interpretation.\n\nAtoms are nullary tokens (i.e, they are at the leaves of a syntax tree); note that their atoms cannot be Atoms.\n\nSee also AbstractInterpretation, atoms, check, SyntaxToken.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.CONJUNCTION","page":"Logical foundations","title":"SoleLogics.CONJUNCTION","text":"const CONJUNCTION = NamedConnective{:∧}()\nconst ∧ = CONJUNCTION\narity(::typeof(∧)) = 2\n\nLogical conjunction. It can be typed by \\wedge<tab>.\n\nSee also NamedConnective, Connective.\n\n\n\n\n\n","category":"constant"},{"location":"logic/#SoleLogics.DISJUNCTION","page":"Logical foundations","title":"SoleLogics.DISJUNCTION","text":"const DISJUNCTION = NamedConnective{:∨}()\nconst ∨ = DISJUNCTION\narity(::typeof(∨)) = 2\n\nLogical disjunction. It can be typed by \\vee<tab>.\n\nSee also NamedConnective, Connective.\n\n\n\n\n\n","category":"constant"},{"location":"logic/#SoleLogics.Formula","page":"Logical foundations","title":"SoleLogics.Formula","text":"abstract type Formula <: Syntactical end\n\nAbstract type for logical formulas. Examples of Formulas are SyntaxLeafs (for example, Atoms and Truth values), AbstractSyntaxStructures (for example, SyntaxTrees and LeftmostLinearForms) and TruthTables ( enriched representation, which associates a syntactic structure with additional memoization structures, which can save computational time upon model checking).\n\nAny formula can be converted into its SyntaxTree representation via tree; its height can be computed, and it can be queried for its syntax tokens, atoms, etc... It can be parsed from its syntaxstring representation via parseformula.\n\nSee also tree, AbstractSyntaxStructure, SyntaxLeaf.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.syntaxstring","page":"Logical foundations","title":"SoleLogics.syntaxstring","text":"syntaxstring(s::Syntactical; kwargs...)::String\n\nReturn the string representation of any syntactic object (e.g., Formula, SyntaxTree, SyntaxToken, Atom, Truth, etc). Note that this representation may introduce redundant parentheses. kwargs can be used to specify how to display syntax tokens/trees under some specific conditions.\n\nThe following kwargs are currently supported:\n\nfunction_notation = false::Bool: when set to true, it forces the use of  function notation for binary operators  (see here).\nremove_redundant_parentheses = true::Bool: when set to false, it prints a syntaxstring  where each syntactical element is wrapped in parentheses.\nparenthesize_atoms = !remove_redundant_parentheses::Bool: when set to true,  it forces the atoms (which are the leaves of a formula's tree structure) to be  wrapped in parentheses.\n\nExamples\n\njulia> syntaxstring(parseformula(\"p∧q∧r∧s∧t\"))\n\"p ∧ q ∧ r ∧ s ∧ t\"\n\njulia> syntaxstring(parseformula(\"p∧q∧r∧s∧t\"), function_notation=true)\n\"∧(∧(∧(∧(p, q), r), s), t)\"\n\njulia> syntaxstring(parseformula(\"p∧q∧r∧s∧t\"), remove_redundant_parentheses=false)\n\"((((p) ∧ (q)) ∧ (r)) ∧ (s)) ∧ (t)\"\n\njulia> syntaxstring(parseformula(\"p∧q∧r∧s∧t\"), remove_redundant_parentheses=true, parenthesize_atoms=true)\n\"(p) ∧ (q) ∧ (r) ∧ (s) ∧ (t)\"\n\njulia> syntaxstring(parseformula(\"◊((p∧s)→q)\"))\n\"◊((p ∧ s) → q)\"\n\njulia> syntaxstring(parseformula(\"◊((p∧s)→q)\"); function_notation = true)\n\"◊(→(∧(p, s), q))\"\n\nSee also parseformula, SyntaxBranch, SyntaxToken.\n\nImplementation\n\nIn the case of a syntax tree, syntaxstring is a recursive function that calls itself on the syntax children of each node. For a correct functioning, the syntaxstring must be defined (including the kwargs... part!) for every newly defined SyntaxToken (e.g., SyntaxLeafs, that is, Atoms and Truth values, and Operators), in a way that it produces a unique string representation, since Base.hash and Base.isequal, at least for SyntaxTrees, rely on it.\n\nIn particular, for the case of Atoms, the function calls itself on the wrapped value:\n\nsyntaxstring(a::Atom; kwargs...) = syntaxstring(value(a); kwargs...)\n\nThe syntaxstring for any value defaults to its string representation, but it can be defined by defining the appropriate syntaxstring method.\n\nwarning: Warning\nThe syntaxstring for syntax tokens (e.g., atoms, operators) should not be prefixed/suffixed by whitespaces, as this may cause ambiguities upon parsing. For similar reasons, syntaxstrings should not contain parentheses ('(', ')'), and, when parsing in function notation, commas (',').\n\nSee also SyntaxLeaf, Operator, parseformula.\n\n\n\n\n\n","category":"function"},{"location":"logic/#SoleLogics.AbstractAlphabet","page":"Logical foundations","title":"SoleLogics.AbstractAlphabet","text":"abstract type AbstractAlphabet{V} end\n\nAbstract type for representing an alphabet of atoms with values of type V. An alphabet (or propositional alphabet) is a set of atoms (assumed to be countable).\n\nExamples\n\njulia> Atom(1) in ExplicitAlphabet(Atom.(1:10))\ntrue\n\njulia> Atom(1) in ExplicitAlphabet(1:10)\ntrue\n\njulia> Atom(1) in AlphabetOfAny{String}()\nfalse\n\njulia> Atom(\"mystring\") in AlphabetOfAny{String}()\ntrue\n\njulia> \"mystring\" in AlphabetOfAny{String}()\n┌ Warning: Please, use Base.in(Atom(mystring), alphabet::AlphabetOfAny{String}) instead of Base.in(mystring, alphabet::AlphabetOfAny{String})\n└ @ SoleLogics ...\ntrue\n\nImplementation\n\nWhen implementing a new alphabet type MyAlphabet, you should provide a method for establishing whether an atom belongs to it or not; while, in general, this method should be:\n\nfunction Base.in(p::Atom, a::MyAlphabet)::Bool\n\nin the case of finite alphabets, it suffices to define a method:\n\nfunction atoms(a::AbstractAlphabet)::AbstractVector{atomstype(a)}\n\nBy default, an alphabet is considered finite:\n\nBase.isfinite(::Type{<:AbstractAlphabet}) = true\nBase.isfinite(a::AbstractAlphabet) = Base.isfinite(typeof(a))\nBase.in(p::Atom, a::AbstractAlphabet) = Base.isfinite(a) ? Base.in(p, atoms(a)) : error(...)\n\nSee also AbstractGrammar, AlphabetOfAny, Atom, ExplicitAlphabet.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.AbstractInterpretation","page":"Logical foundations","title":"SoleLogics.AbstractInterpretation","text":"abstract type AbstractInterpretation end\n\nAbstract type for representing a logical interpretation. In the case of propositional logic, is essentially a map atom → truth value.\n\nProperties expressed via logical formulas can be checked on logical interpretations.\n\nSee also check, AbstractAssignment, AbstractKripkeStructure.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.AbstractInterpretationSet","page":"Logical foundations","title":"SoleLogics.AbstractInterpretationSet","text":"abstract type AbstractInterpretationSet{M<:AbstractInterpretation} <: AbstractDataset end\n\nAbstract type for ordered sets of interpretations. A set of interpretations, also referred to as a dataset in this context, is a collection of instances, each of which is an interpretation, and is identified by an index iinstance::Integer. These structures are especially useful when performing [model checking](https://en.wikipedia.org/wiki/Modelchecking).\n\nSee alsotruthtype, InterpretationVector.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.check","page":"Logical foundations","title":"SoleLogics.check","text":"check(\n    φ::Formula,\n    i::AbstractInterpretation,\n    args...;\n    kwargs...\n)::Bool\n\nCheck a formula on a logical interpretation (or model), returning true if the truth value for the formula istop. This process is referred to as (finite) model checking, and there are many algorithms for it, typically depending on the complexity of the logic.\n\nExamples\n\njulia> @atoms String p q\n2-element Vector{Atom{String}}:\n Atom{String}(\"p\")\n Atom{String}(\"q\")\n\njulia> td = TruthDict([p => TOP, q => BOT])\nTruthDict with values:\n┌────────┬────────┐\n│      q │      p │\n│ String │ String │\n├────────┼────────┤\n│      ⊥ │      ⊤ │\n└────────┴────────┘\n\njulia> check(CONJUNCTION(p,q), td)\nfalse\n\nSee also interpret, Formula, AbstractInterpretation, TruthDict.\n\n\n\n\n\nfunction check(\n    φ::SyntaxTree,\n    i::AbstractKripkeStructure,\n    w::Union{Nothing,AnyWorld,<:AbstractWorld} = nothing;\n    use_memo::Union{Nothing,AbstractDict{<:Formula,<:Vector{<:AbstractWorld}}} = nothing,\n    perform_normalization::Bool = true,\n    memo_max_height::Union{Nothing,Int} = nothing,\n)::Bool\n\nCheck a formula on a specific word in a KripkeStructure.\n\nExamples\n\njulia> using Graphs, Random\n\njulia> @atoms String p q\n2-element Vector{Atom{String}}:\n Atom{String}(\"p\")\n Atom{String}(\"q\")\n\njulia> fmodal = randformula(Random.MersenneTwister(14), 3, [p,q], SoleLogics.BASE_MODAL_CONNECTIVES)\n¬□(p ∨ q)\n\n# A special graph, called Kripke Frame, is created.\n# Nodes are called worlds, and the edges are relations between worlds.\njulia> worlds = SoleLogics.World.(1:5) # 5 worlds are created, numerated from 1 to 5\n\njulia> edges = Edge.([(1,2), (1,3), (2,4), (3,4), (3,5)])\n\njulia> kframe = SoleLogics.ExplicitCrispUniModalFrame(worlds, Graphs.SimpleDiGraph(edges))\n\n# A valuation function establishes which fact are true on each world\njulia> valuation = Dict([\n    worlds[1] => TruthDict([p => true, q => false]),\n    worlds[2] => TruthDict([p => true, q => true]),\n    worlds[3] => TruthDict([p => true, q => false]),\n    worlds[4] => TruthDict([p => false, q => false]),\n    worlds[5] => TruthDict([p => false, q => true]),\n ])\n\n# Kripke Frame and valuation function are merged in a Kripke Structure\njulia> kstruct = KripkeStructure(kframe, valuation)\n\njulia> [w => check(fmodal, kstruct, w) for w in worlds]\n5-element Vector{Pair{SoleLogics.World{Int64}, Bool}}:\n SoleLogics.World{Int64}(1) => 0\n SoleLogics.World{Int64}(2) => 1\n SoleLogics.World{Int64}(3) => 1\n SoleLogics.World{Int64}(4) => 0\n SoleLogics.World{Int64}(5) => 0\n\nSee also SyntaxTree, AbstractWorld, KripkeStructure.\n\n\n\n\n\ncheck(\n    φ::Formula,\n    s::AbstractInterpretationSet,\n    i_instance::Integer,\n    args...;\n    kwargs...\n)::Bool\n\nCheck a formula on the i-th instance of an AbstractInterpretationSet.\n\nSee also AbstractInterpretationSet, Formula.\n\n\n\n\n\ncheck(\n    φ::Formula,\n    s::AbstractInterpretationSet,\n    args...;\n    kwargs...\n)::Vector{Bool}\n\nCheck a formula on all instances of an AbstractInterpretationSet.\n\nSee also AbstractInterpretationSet, Formula.\n\n\n\n\n\n","category":"function"},{"location":"logic/#SoleLogics.AbstractWorld","page":"Logical foundations","title":"SoleLogics.AbstractWorld","text":"abstract type AbstractWorld end\n\nAbstract type for the nodes of an annotated accessibility graph (Kripke structure). This is used, for example, in modal logic, where the truth of formulas is relativized to worlds, that is, nodes of a graph.\n\nImplementing\n\nWhen implementing a new world type, the logical semantics should be defined via accessibles methods; refer to the help for accessibles.\n\nSee also AbstractKripkeStructure, AbstractFrame.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.GeometricalWorld","page":"Logical foundations","title":"SoleLogics.GeometricalWorld","text":"abstract type GeometricalWorld <: AbstractWorld end\n\nAbstract type for worlds with a geometrical interpretation.\n\nSee also Point, Interval, Interval2D, AbstractWorld.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.Interval","page":"Logical foundations","title":"SoleLogics.Interval","text":"struct Interval{T} <: GeometricalWorld\n    x :: T\n    y :: T\nend\n\nAn interval in a 1-dimensional space, with coordinates of type T.\n\nExamples\n\njulia> SoleLogics.goeswithdim(SoleLogics.Interval(1,2),1)\ntrue\n\njulia> SoleLogics.goeswithdim(SoleLogics.Interval(1,2),2)\nfalse\n\njulia> collect(accessibles(SoleLogics.FullDimensionalFrame(5), Interval(1,2), SoleLogics.IA_L))\n6-element Vector{Interval{Int64}}:\n (3−4)\n (3−5)\n (4−5)\n (3−6)\n (4−6)\n (5−6)\n\n\n\nSee also goeswithdim, accessibles, FullDimensionalFrame, Point, Interval2D, GeometricalWorld, AbstractWorld.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.Interval2D","page":"Logical foundations","title":"SoleLogics.Interval2D","text":"struct Interval2D{T} <: GeometricalWorld\n    x :: Interval{T}\n    y :: Interval{T}\nend\n\nA orthogonal rectangle in a 2-dimensional space, with coordinates of type T. This is the 2-dimensional Interval counterpart, that is, the combination of two orthogonal Intervals.\n\nExamples\n\njulia> SoleLogics.goeswithdim(SoleLogics.Interval2D((1,2),(3,4)),1)\nfalse\n\njulia> SoleLogics.goeswithdim(SoleLogics.Interval2D((1,2),(3,4)),2)\ntrue\n\njulia> collect(accessibles(SoleLogics.FullDimensionalFrame(5,5), Interval2D((2,3),(2,4)), SoleLogics.IA_LL))\n3-element Vector{Interval2D{Int64}}:\n ((4−5)×(5−6))\n ((4−6)×(5−6))\n ((5−6)×(5−6))\n\n\nSee also goeswithdim, accessibles, FullDimensionalFrame, Point, Interval, GeometricalWorld, AbstractWorld.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.AbstractRelation","page":"Logical foundations","title":"SoleLogics.AbstractRelation","text":"abstract type AbstractRelation end\n\nAbstract type for the relations of a multi-modal annotated accessibility graph (Kripke structure). Two noteworthy relations are identityrel and globalrel, which access the current world and all worlds, respectively.\n\nExamples\n\njulia> fr = SoleLogics.FullDimensionalFrame((10,),);\n\njulia> Interval(8,11) in (accessibles(fr, Interval(2,5), IA_L))\ntrue\n\nImplementation\n\nWhen implementing a new relation type R, please provide the methods:\n\narity(::R)::Int = ...\nsyntaxstring(::R; kwargs...)::String = ...\n\nIf the relation is symmetric, please specify its converse relation cr with:\n\nhasconverse(::R) = true\nconverse(::R) = cr\n\nIf the relation is many-to-one or one-to-one, please flag it with:\n\nistoone(::R) = true\n\nIf the relation is reflexive or transitive, flag it with:\n\nisreflexive(::R) = true\nistransitive(::R) = true\n\nMost importantly, the logical semantics for R should be defined via accessibles methods; refer to the help for accessibles.\n\nSee also issymmetric, isreflexive, istransitive, isgrounding, arity, syntaxstring, converse, hasconverse, istoone, identityrel, globalrel, accessibles, AbstractKripkeStructure, AbstractFrame, AbstractWorld.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.globalrel","page":"Logical foundations","title":"SoleLogics.globalrel","text":"struct GlobalRel <: AbstractRelation end;\nconst globalrel  = GlobalRel();\n\nSingleton type for the global relation. This is a binary relation via which a world accesses every other world within the frame. The relation is also symmetric, reflexive and transitive.\n\nExamples\n\njulia> syntaxstring(SoleLogics.globalrel)\n\"G\"\n\njulia> SoleLogics.converse(globalrel)\nGlobalRel()\n\nSee also identityrel, AbstractRelation, AbstractWorld, AbstractFrame. AbstractKripkeStructure,\n\n\n\n\n\n","category":"constant"},{"location":"logic/#SoleLogics.IA_L","page":"Logical foundations","title":"SoleLogics.IA_L","text":"See IntervalRelation\n\n\n\n\n\n","category":"constant"},{"location":"logic/#SoleLogics.AbstractFrame","page":"Logical foundations","title":"SoleLogics.AbstractFrame","text":"abstract type AbstractFrame{W<:AbstractWorld} end\n\nAbstract type for an accessibility graph (Kripke frame), that gives the topology to Kripke structures. A frame can be queried for its set of vertices (also called worlds, see allworlds), and it can be browsed via its accessibility relation(s) (see accessibles). Refer to FullDimensionalFrame as an example.\n\nSee also truthtype, , allworlds, nworlds, AbstractKripkeStructure, AbstractWorld.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.AbstractKripkeStructure","page":"Logical foundations","title":"SoleLogics.AbstractKripkeStructure","text":"abstract type AbstractKripkeStructure <: AbstractInterpretation end\n\nAbstract type for representing Kripke structures's. It comprehends a directed graph structure (Kripke frame), where nodes are referred to as worlds, and the binary relation between them is referred to as the accessibility relation. Additionally, each world is associated with a mapping from Atoms to Truth values.\n\nSee also frame, worldtype, accessibles, AbstractInterpretation.\n\n\n\n\n\n","category":"type"},{"location":"logic/#SoleLogics.accessibles","page":"Logical foundations","title":"SoleLogics.accessibles","text":"accessibles(fr::AbstractUniModalFrame{W}, w::W)::Worlds{W} where {W<:AbstractWorld}\n\nReturn the worlds in frame fr that are accessible from world w.\n\nSee also AbstractWorld, AbstractUniModalFrame.\n\n\n\n\n\naccessibles(\n    fr::AbstractMultiModalFrame{W},\n    w::W,\n    r::AbstractRelation\n) where {W<:AbstractWorld}\n\nReturn the worlds in frame fr that are accessible from world w via relation r.\n\nExamples\n\njulia> fr = SoleLogics.FullDimensionalFrame((10,),);\n\njulia> typeof(accessibles(fr, Interval(2,5), IA_L))\nBase.Generator{...}\n\njulia> typeof(accessibles(fr, globalrel))\nBase.Generator{...}\n\njulia> @assert SoleLogics.nworlds(fr) == length(collect(accessibles(fr, globalrel)))\n\njulia> typeof(accessibles(fr, Interval(2,5), identityrel))\nVector{Interval{Int64}}\n\njulia> Interval(8,11) in collect(accessibles(fr, Interval(2,5), IA_L))\ntrue\n\nImplementation\n\nSince accessibles always returns an iterator of worlds of the same type W, the current implementation of accessibles for multi-modal frames delegates the enumeration to a lower level _accessibles function, which returns an iterator of parameter tuples that are, then, fed to the world constructor the using IterTools generators, as in:\n\nfunction accessibles(\n    fr::AbstractMultiModalFrame{W},\n    w::W,\n    r::AbstractRelation,\n) where {W<:AbstractWorld}\n    IterTools.imap(W, _accessibles(fr, w, r))\nend\n\nAs such, when defining new frames, worlds, and/or relations, one should provide new methods for _accessibles. For example:\n\n_accessibles(fr::Full1DFrame, w::Interval{<:Integer}, ::_IA_A) = zip(Iterators.repeated(w.y), w.y+1:X(fr)+1)\n\nThis pattern is generally convenient; it can, however, be bypassed, although this requires defining two additional methods in order to resolve dispatch ambiguities. When defining a new frame type FR{W}, one can resolve the ambiguities and define a custom accessibles method by providing these three methods:\n\n# access worlds through relation `r`\nfunction accessibles(\n    fr::FR{W},\n    w::W,\n    r::AbstractRelation,\n) where {W<:AbstractWorld}\n    ...\nend\n\n# access current world\nfunction accessibles(\n    fr::FR{W},\n    w::W,\n    r::IdentityRel,\n) where {W<:AbstractWorld}\n    [w]\nend\n\n# access all worlds\nfunction accessibles(\n    fr::FR{W},\n    w::W,\n    r::GlobalRel,\n) where {W<:AbstractWorld}\n    allworlds(fr)\nend\n\nIn general, it should be true that collect(accessibles(fr, w, r)) isa AbstractWorlds{W}.\n\nSee also AbstractWorld, AbstractRelation, AbstractMultiModalFrame.\n\n\n\n\n\n","category":"function"}]
}
